
nios2_sw.elf:     file format elf32-littlenios2
nios2_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003264 memsz 0x00003264 flags r-x
    LOAD off    0x00004284 vaddr 0x00003284 paddr 0x0000465c align 2**12
         filesz 0x000013d8 memsz 0x000013d8 flags rw-
    LOAD off    0x00005a34 vaddr 0x00005a34 paddr 0x00005a34 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002ff8  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000060  00003224  00003224  00004224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013d8  00003284  0000465c  00004284  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00005a34  00005a34  00005a34  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00005b54  00005b54  0000565c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000565c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000720  00000000  00000000  00005680  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008cb2  00000000  00000000  00005da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034cb  00000000  00000000  0000ea52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003801  00000000  00000000  00011f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ecc  00000000  00000000  00015720  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f24  00000000  00000000  000165ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009fd  00000000  00000000  00018510  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00018f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00018f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001b05b  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001b05e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001b06a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001b06b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001b06c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001b070  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001b074  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001b078  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001b083  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001b08e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0001b099  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001d  00000000  00000000  0001b0a2  2**0
                  CONTENTS, READONLY
 29 .jdi          00004056  00000000  00000000  0001b0bf  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00049967  00000000  00000000  0001f115  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
00003224 l    d  .rodata	00000000 .rodata
00003284 l    d  .rwdata	00000000 .rwdata
00005a34 l    d  .bss	00000000 .bss
00005b54 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios2_sw_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00003284 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000448 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000005d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000724 l     F .text	00000038 alt_dev_reg
00003364 l     O .rwdata	00001060 jtag_uart_0
000043c4 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000a24 l     F .text	00000204 altera_avalon_jtag_uart_irq
00000c28 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00001400 l     F .text	00000098 altera_avalon_uart_irq
00001498 l     F .text	000000e0 altera_avalon_uart_rxirq
00001578 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00001710 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000193c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00001dd0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001f14 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001f40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000023d8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00002530 l     F .text	00000050 alt_get_errno
00002580 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000309c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00005a50 g     O .bss	00000004 alt_instruction_exception_handler
0000052c g     F .text	00000078 alt_main
00000294 g     F .text	00000080 _puts_r
00005a54 g     O .bss	00000100 alt_irq
0000465c g       *ABS*	00000000 __flash_rwdata_start
000029f0 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005a34 g     O .bss	00000004 errno
00005a3c g     O .bss	00000004 alt_argv
0000c630 g       *ABS*	00000000 _gp
000005a4 g     F .text	00000030 usleep
000044b0 g     O .rwdata	00000180 alt_fd_list
00002a10 g     F .text	00000090 alt_find_dev
00002d88 g     F .text	00000028 memcpy
000024b8 g     F .text	00000078 alt_io_redirect
00003224 g       *ABS*	00000000 __DTOR_END__
00000314 g     F .text	00000014 puts
00002c88 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000e24 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000031b8 g     F .text	00000008 .hidden __udivsi3
00004648 g     O .rwdata	00000004 alt_max_fd
00004630 g     O .rwdata	00000004 _global_impure_ptr
00005b54 g       *ABS*	00000000 __bss_end
000022e8 g     F .text	000000f0 alt_iic_isr_register
000028ec g     F .text	00000104 alt_tick
00001358 g     F .text	000000a8 altera_avalon_uart_init
0000229c g     F .text	0000004c alt_ic_irq_enabled
00002854 g     F .text	00000098 alt_alarm_stop
00005a44 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00004488 g     O .rwdata	00000028 alt_dev_null
00001ef8 g     F .text	0000001c alt_dcache_flush_all
0000465c g       *ABS*	00000000 __ram_rwdata_end
00004640 g     O .rwdata	00000008 alt_dev_list
00000624 g     F .text	00000100 write
00003284 g       *ABS*	00000000 __ram_rodata_end
000031c0 g     F .text	00000008 .hidden __umodsi3
00005b54 g       *ABS*	00000000 end
0000198c g     F .text	000001ac altera_avalon_uart_write
00000960 g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
00003224 g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
000012a8 g     F .text	00000060 altera_avalon_uart_write_fd
00001308 g     F .text	00000050 altera_avalon_uart_close_fd
00001030 g     F .text	00000218 altera_avalon_jtag_uart_write
00002f00 g     F .text	0000019c __call_exitprocs
0000022c g     F .text	0000003c _start
00005a48 g     O .bss	00000004 _alt_tick_rate
00005a4c g     O .bss	00000004 _alt_nticks
00000790 g     F .text	0000006c alt_sys_init
00002db0 g     F .text	00000150 __register_exitproc
00000cd0 g     F .text	00000068 altera_avalon_jtag_uart_close
000031c8 g     F .text	00000028 .hidden __mulsi3
00003284 g       *ABS*	00000000 __ram_rwdata_start
00003224 g       *ABS*	00000000 __ram_rodata_start
000007fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00002bb4 g     F .text	000000d4 alt_get_fd
00001c78 g     F .text	00000158 alt_busy_sleep
00002d58 g     F .text	00000030 memcmp
000008bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00005b54 g       *ABS*	00000000 __alt_stack_base
0000090c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002aa0 g     F .text	00000114 alt_find_file
00001f90 g     F .text	000000a4 alt_dev_llist_insert
00000344 g     F .text	000000ac __sfvwrite_small_dev
00005a34 g       *ABS*	00000000 __bss_start
00000268 g     F .text	0000002c main
00005a40 g     O .bss	00000004 alt_envp
0000085c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000464c g     O .rwdata	00000004 alt_errno
00003108 g     F .text	00000054 .hidden __divsi3
00003224 g       *ABS*	00000000 __CTOR_END__
00003224 g       *ABS*	00000000 __flash_rodata_start
00003224 g       *ABS*	00000000 __DTOR_LIST__
0000075c g     F .text	00000034 alt_irq_init
000027d4 g     F .text	00000080 alt_release_fd
00002d24 g     F .text	00000014 atexit
000003f0 g     F .text	00000058 _write_r
00004634 g     O .rwdata	00000004 _impure_ptr
00005a38 g     O .bss	00000004 alt_argc
00002090 g     F .text	0000005c _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00004638 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002108 g     F .text	00000050 alt_ic_isr_register
0000465c g       *ABS*	00000000 _edata
00001248 g     F .text	00000060 altera_avalon_uart_read_fd
00005b54 g       *ABS*	00000000 _end
0000022c g       *ABS*	00000000 __ram_exceptions_end
00000d38 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000021f8 g     F .text	000000a4 alt_ic_irq_disable
00002d38 g     F .text	00000020 exit
0000315c g     F .text	0000005c .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000016bc g     F .text	00000054 altera_avalon_uart_close
000031f0 g     F .text	00000034 _exit
00001b38 g     F .text	00000140 alt_alarm_start
00000328 g     F .text	0000001c strlen
00002674 g     F .text	00000160 open
000020ec g     F .text	0000001c alt_icache_flush_all
00004650 g     O .rwdata	00000004 alt_priority_mask
00002158 g     F .text	000000a0 alt_ic_irq_enable
00001760 g     F .text	000001dc altera_avalon_uart_read
00004654 g     O .rwdata	00000008 alt_alarm_list
00002034 g     F .text	0000005c _do_ctors
00001e20 g     F .text	000000d8 close
000004ac g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800034 	movhi	r2,0
 140:	10969504 	addi	r2,r2,23124
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800034 	movhi	r2,0
 158:	10969504 	addi	r2,r2,23124
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a50817 	ldw	r2,-27616(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a50817 	ldw	r2,-27616(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
     234:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     238:	d6b18c14 	ori	gp,gp,50736
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     240:	10968d14 	ori	r2,r2,23092

    movhi r3, %hi(__bss_end)
     244:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     248:	18d6d514 	ori	r3,r3,23380

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	00004ac0 	call	4ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	000052c0 	call	52c <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <alt_after_alt_main>

00000268 <main>:
 */

#include <stdio.h>
#include <unistd.h>
int main()
{
     268:	defffe04 	addi	sp,sp,-8
     26c:	dfc00115 	stw	ra,4(sp)
     270:	df000015 	stw	fp,0(sp)
     274:	d839883a 	mov	fp,sp
  while(1)
    {
      usleep(1000*1000);
     278:	010003f4 	movhi	r4,15
     27c:	21109004 	addi	r4,r4,16960
     280:	00005a40 	call	5a4 <usleep>
      printf("Hello, I've done it again!\n");
     284:	01000034 	movhi	r4,0
     288:	210c8904 	addi	r4,r4,12836
     28c:	00003140 	call	314 <puts>
    }
     290:	003ff906 	br	278 <main+0x10>

00000294 <_puts_r>:
     294:	defffd04 	addi	sp,sp,-12
     298:	dc000015 	stw	r16,0(sp)
     29c:	2021883a 	mov	r16,r4
     2a0:	2809883a 	mov	r4,r5
     2a4:	dfc00215 	stw	ra,8(sp)
     2a8:	dc400115 	stw	r17,4(sp)
     2ac:	2823883a 	mov	r17,r5
     2b0:	00003280 	call	328 <strlen>
     2b4:	81400217 	ldw	r5,8(r16)
     2b8:	00c00034 	movhi	r3,0
     2bc:	18c0d104 	addi	r3,r3,836
     2c0:	28c00115 	stw	r3,4(r5)
     2c4:	8009883a 	mov	r4,r16
     2c8:	880d883a 	mov	r6,r17
     2cc:	100f883a 	mov	r7,r2
     2d0:	00003440 	call	344 <__sfvwrite_small_dev>
     2d4:	00ffffc4 	movi	r3,-1
     2d8:	10c00926 	beq	r2,r3,300 <_puts_r+0x6c>
     2dc:	81400217 	ldw	r5,8(r16)
     2e0:	01800034 	movhi	r6,0
     2e4:	8009883a 	mov	r4,r16
     2e8:	28800117 	ldw	r2,4(r5)
     2ec:	318c9004 	addi	r6,r6,12864
     2f0:	01c00044 	movi	r7,1
     2f4:	103ee83a 	callr	r2
     2f8:	10bfffe0 	cmpeqi	r2,r2,-1
     2fc:	0085c83a 	sub	r2,zero,r2
     300:	dfc00217 	ldw	ra,8(sp)
     304:	dc400117 	ldw	r17,4(sp)
     308:	dc000017 	ldw	r16,0(sp)
     30c:	dec00304 	addi	sp,sp,12
     310:	f800283a 	ret

00000314 <puts>:
     314:	00800034 	movhi	r2,0
     318:	10918d04 	addi	r2,r2,17972
     31c:	200b883a 	mov	r5,r4
     320:	11000017 	ldw	r4,0(r2)
     324:	00002941 	jmpi	294 <_puts_r>

00000328 <strlen>:
     328:	2005883a 	mov	r2,r4
     32c:	10c00007 	ldb	r3,0(r2)
     330:	18000226 	beq	r3,zero,33c <strlen+0x14>
     334:	10800044 	addi	r2,r2,1
     338:	003ffc06 	br	32c <strlen+0x4>
     33c:	1105c83a 	sub	r2,r2,r4
     340:	f800283a 	ret

00000344 <__sfvwrite_small_dev>:
     344:	2880000b 	ldhu	r2,0(r5)
     348:	defffa04 	addi	sp,sp,-24
     34c:	dc000015 	stw	r16,0(sp)
     350:	dfc00515 	stw	ra,20(sp)
     354:	dd000415 	stw	r20,16(sp)
     358:	dcc00315 	stw	r19,12(sp)
     35c:	dc800215 	stw	r18,8(sp)
     360:	dc400115 	stw	r17,4(sp)
     364:	1080020c 	andi	r2,r2,8
     368:	2821883a 	mov	r16,r5
     36c:	10001726 	beq	r2,zero,3cc <__sfvwrite_small_dev+0x88>
     370:	2880008f 	ldh	r2,2(r5)
     374:	10001216 	blt	r2,zero,3c0 <__sfvwrite_small_dev+0x7c>
     378:	2027883a 	mov	r19,r4
     37c:	3025883a 	mov	r18,r6
     380:	3823883a 	mov	r17,r7
     384:	05010004 	movi	r20,1024
     388:	04400b0e 	bge	zero,r17,3b8 <__sfvwrite_small_dev+0x74>
     38c:	8140008f 	ldh	r5,2(r16)
     390:	880f883a 	mov	r7,r17
     394:	a440010e 	bge	r20,r17,39c <__sfvwrite_small_dev+0x58>
     398:	01c10004 	movi	r7,1024
     39c:	9809883a 	mov	r4,r19
     3a0:	900d883a 	mov	r6,r18
     3a4:	00003f00 	call	3f0 <_write_r>
     3a8:	0080050e 	bge	zero,r2,3c0 <__sfvwrite_small_dev+0x7c>
     3ac:	88a3c83a 	sub	r17,r17,r2
     3b0:	90a5883a 	add	r18,r18,r2
     3b4:	003ff406 	br	388 <__sfvwrite_small_dev+0x44>
     3b8:	0005883a 	mov	r2,zero
     3bc:	00000406 	br	3d0 <__sfvwrite_small_dev+0x8c>
     3c0:	8080000b 	ldhu	r2,0(r16)
     3c4:	10801014 	ori	r2,r2,64
     3c8:	8080000d 	sth	r2,0(r16)
     3cc:	00bfffc4 	movi	r2,-1
     3d0:	dfc00517 	ldw	ra,20(sp)
     3d4:	dd000417 	ldw	r20,16(sp)
     3d8:	dcc00317 	ldw	r19,12(sp)
     3dc:	dc800217 	ldw	r18,8(sp)
     3e0:	dc400117 	ldw	r17,4(sp)
     3e4:	dc000017 	ldw	r16,0(sp)
     3e8:	dec00604 	addi	sp,sp,24
     3ec:	f800283a 	ret

000003f0 <_write_r>:
     3f0:	defffd04 	addi	sp,sp,-12
     3f4:	dc000015 	stw	r16,0(sp)
     3f8:	04000034 	movhi	r16,0
     3fc:	dc400115 	stw	r17,4(sp)
     400:	84168d04 	addi	r16,r16,23092
     404:	2023883a 	mov	r17,r4
     408:	2809883a 	mov	r4,r5
     40c:	300b883a 	mov	r5,r6
     410:	380d883a 	mov	r6,r7
     414:	dfc00215 	stw	ra,8(sp)
     418:	80000015 	stw	zero,0(r16)
     41c:	00006240 	call	624 <write>
     420:	00ffffc4 	movi	r3,-1
     424:	10c0031e 	bne	r2,r3,434 <_write_r+0x44>
     428:	80c00017 	ldw	r3,0(r16)
     42c:	18000126 	beq	r3,zero,434 <_write_r+0x44>
     430:	88c00015 	stw	r3,0(r17)
     434:	dfc00217 	ldw	ra,8(sp)
     438:	dc400117 	ldw	r17,4(sp)
     43c:	dc000017 	ldw	r16,0(sp)
     440:	dec00304 	addi	sp,sp,12
     444:	f800283a 	ret

00000448 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     448:	defffc04 	addi	sp,sp,-16
     44c:	df000315 	stw	fp,12(sp)
     450:	df000304 	addi	fp,sp,12
     454:	e13ffd15 	stw	r4,-12(fp)
     458:	e17ffe15 	stw	r5,-8(fp)
     45c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     460:	e0fffe17 	ldw	r3,-8(fp)
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	18800c26 	beq	r3,r2,49c <alt_load_section+0x54>
  {
    while( to != end )
     46c:	00000806 	br	490 <alt_load_section+0x48>
    {
      *to++ = *from++;
     470:	e0bffe17 	ldw	r2,-8(fp)
     474:	10c00104 	addi	r3,r2,4
     478:	e0fffe15 	stw	r3,-8(fp)
     47c:	e0fffd17 	ldw	r3,-12(fp)
     480:	19000104 	addi	r4,r3,4
     484:	e13ffd15 	stw	r4,-12(fp)
     488:	18c00017 	ldw	r3,0(r3)
     48c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     490:	e0fffe17 	ldw	r3,-8(fp)
     494:	e0bfff17 	ldw	r2,-4(fp)
     498:	18bff51e 	bne	r3,r2,470 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     49c:	e037883a 	mov	sp,fp
     4a0:	df000017 	ldw	fp,0(sp)
     4a4:	dec00104 	addi	sp,sp,4
     4a8:	f800283a 	ret

000004ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     4ac:	defffe04 	addi	sp,sp,-8
     4b0:	dfc00115 	stw	ra,4(sp)
     4b4:	df000015 	stw	fp,0(sp)
     4b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     4bc:	01000034 	movhi	r4,0
     4c0:	21119704 	addi	r4,r4,18012
     4c4:	01400034 	movhi	r5,0
     4c8:	294ca104 	addi	r5,r5,12932
     4cc:	01800034 	movhi	r6,0
     4d0:	31919704 	addi	r6,r6,18012
     4d4:	00004480 	call	448 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     4d8:	01000034 	movhi	r4,0
     4dc:	21000804 	addi	r4,r4,32
     4e0:	01400034 	movhi	r5,0
     4e4:	29400804 	addi	r5,r5,32
     4e8:	01800034 	movhi	r6,0
     4ec:	31808b04 	addi	r6,r6,556
     4f0:	00004480 	call	448 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     4f4:	01000034 	movhi	r4,0
     4f8:	210c8904 	addi	r4,r4,12836
     4fc:	01400034 	movhi	r5,0
     500:	294c8904 	addi	r5,r5,12836
     504:	01800034 	movhi	r6,0
     508:	318ca104 	addi	r6,r6,12932
     50c:	00004480 	call	448 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     510:	0001ef80 	call	1ef8 <alt_dcache_flush_all>
  alt_icache_flush_all();
     514:	00020ec0 	call	20ec <alt_icache_flush_all>
}
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     52c:	defffd04 	addi	sp,sp,-12
     530:	dfc00215 	stw	ra,8(sp)
     534:	df000115 	stw	fp,4(sp)
     538:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     53c:	0009883a 	mov	r4,zero
     540:	000075c0 	call	75c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     544:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     548:	00007900 	call	790 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     54c:	01000034 	movhi	r4,0
     550:	210c9104 	addi	r4,r4,12868
     554:	01400034 	movhi	r5,0
     558:	294c9104 	addi	r5,r5,12868
     55c:	01800034 	movhi	r6,0
     560:	318c9104 	addi	r6,r6,12868
     564:	00024b80 	call	24b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     568:	00020340 	call	2034 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     56c:	01000034 	movhi	r4,0
     570:	21082404 	addi	r4,r4,8336
     574:	0002d240 	call	2d24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     578:	d1250217 	ldw	r4,-27640(gp)
     57c:	d0e50317 	ldw	r3,-27636(gp)
     580:	d0a50417 	ldw	r2,-27632(gp)
     584:	180b883a 	mov	r5,r3
     588:	100d883a 	mov	r6,r2
     58c:	00002680 	call	268 <main>
     590:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     594:	01000044 	movi	r4,1
     598:	0001e200 	call	1e20 <close>
  exit (result);
     59c:	e13fff17 	ldw	r4,-4(fp)
     5a0:	0002d380 	call	2d38 <exit>

000005a4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     5a4:	defffd04 	addi	sp,sp,-12
     5a8:	dfc00215 	stw	ra,8(sp)
     5ac:	df000115 	stw	fp,4(sp)
     5b0:	df000104 	addi	fp,sp,4
     5b4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
     5b8:	e13fff17 	ldw	r4,-4(fp)
     5bc:	0001c780 	call	1c78 <alt_busy_sleep>
}
     5c0:	e037883a 	mov	sp,fp
     5c4:	dfc00117 	ldw	ra,4(sp)
     5c8:	df000017 	ldw	fp,0(sp)
     5cc:	dec00204 	addi	sp,sp,8
     5d0:	f800283a 	ret

000005d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     5d4:	defffe04 	addi	sp,sp,-8
     5d8:	dfc00115 	stw	ra,4(sp)
     5dc:	df000015 	stw	fp,0(sp)
     5e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
     5e4:	00800034 	movhi	r2,0
     5e8:	10919304 	addi	r2,r2,17996
     5ec:	10800017 	ldw	r2,0(r2)
     5f0:	10000526 	beq	r2,zero,608 <alt_get_errno+0x34>
     5f4:	00800034 	movhi	r2,0
     5f8:	10919304 	addi	r2,r2,17996
     5fc:	10800017 	ldw	r2,0(r2)
     600:	103ee83a 	callr	r2
     604:	00000206 	br	610 <alt_get_errno+0x3c>
     608:	00800034 	movhi	r2,0
     60c:	10968d04 	addi	r2,r2,23092
}
     610:	e037883a 	mov	sp,fp
     614:	dfc00117 	ldw	ra,4(sp)
     618:	df000017 	ldw	fp,0(sp)
     61c:	dec00204 	addi	sp,sp,8
     620:	f800283a 	ret

00000624 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
     624:	defff904 	addi	sp,sp,-28
     628:	dfc00615 	stw	ra,24(sp)
     62c:	df000515 	stw	fp,20(sp)
     630:	df000504 	addi	fp,sp,20
     634:	e13ffd15 	stw	r4,-12(fp)
     638:	e17ffe15 	stw	r5,-8(fp)
     63c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
     640:	e0bffd17 	ldw	r2,-12(fp)
     644:	10000816 	blt	r2,zero,668 <write+0x44>
     648:	e13ffd17 	ldw	r4,-12(fp)
     64c:	01400304 	movi	r5,12
     650:	00031c80 	call	31c8 <__mulsi3>
     654:	1007883a 	mov	r3,r2
     658:	00800034 	movhi	r2,0
     65c:	10912c04 	addi	r2,r2,17584
     660:	1885883a 	add	r2,r3,r2
     664:	00000106 	br	66c <write+0x48>
     668:	0005883a 	mov	r2,zero
     66c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
     670:	e0bffb17 	ldw	r2,-20(fp)
     674:	10002126 	beq	r2,zero,6fc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
     678:	e0bffb17 	ldw	r2,-20(fp)
     67c:	10800217 	ldw	r2,8(r2)
     680:	108000cc 	andi	r2,r2,3
     684:	10001826 	beq	r2,zero,6e8 <write+0xc4>
     688:	e0bffb17 	ldw	r2,-20(fp)
     68c:	10800017 	ldw	r2,0(r2)
     690:	10800617 	ldw	r2,24(r2)
     694:	10001426 	beq	r2,zero,6e8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
     698:	e0bffb17 	ldw	r2,-20(fp)
     69c:	10800017 	ldw	r2,0(r2)
     6a0:	10800617 	ldw	r2,24(r2)
     6a4:	e0ffff17 	ldw	r3,-4(fp)
     6a8:	e13ffb17 	ldw	r4,-20(fp)
     6ac:	e17ffe17 	ldw	r5,-8(fp)
     6b0:	180d883a 	mov	r6,r3
     6b4:	103ee83a 	callr	r2
     6b8:	e0bffc15 	stw	r2,-16(fp)
     6bc:	e0bffc17 	ldw	r2,-16(fp)
     6c0:	1000070e 	bge	r2,zero,6e0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
     6c4:	00005d40 	call	5d4 <alt_get_errno>
     6c8:	1007883a 	mov	r3,r2
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	0085c83a 	sub	r2,zero,r2
     6d4:	18800015 	stw	r2,0(r3)
        return -1;
     6d8:	00bfffc4 	movi	r2,-1
     6dc:	00000c06 	br	710 <write+0xec>
      }
      return rval;
     6e0:	e0bffc17 	ldw	r2,-16(fp)
     6e4:	00000a06 	br	710 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
     6e8:	00005d40 	call	5d4 <alt_get_errno>
     6ec:	1007883a 	mov	r3,r2
     6f0:	00800344 	movi	r2,13
     6f4:	18800015 	stw	r2,0(r3)
     6f8:	00000406 	br	70c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
     6fc:	00005d40 	call	5d4 <alt_get_errno>
     700:	1007883a 	mov	r3,r2
     704:	00801444 	movi	r2,81
     708:	18800015 	stw	r2,0(r3)
  }
  return -1;
     70c:	00bfffc4 	movi	r2,-1
}
     710:	e037883a 	mov	sp,fp
     714:	dfc00117 	ldw	ra,4(sp)
     718:	df000017 	ldw	fp,0(sp)
     71c:	dec00204 	addi	sp,sp,8
     720:	f800283a 	ret

00000724 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     724:	defffd04 	addi	sp,sp,-12
     728:	dfc00215 	stw	ra,8(sp)
     72c:	df000115 	stw	fp,4(sp)
     730:	df000104 	addi	fp,sp,4
     734:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     738:	e13fff17 	ldw	r4,-4(fp)
     73c:	01400034 	movhi	r5,0
     740:	29519004 	addi	r5,r5,17984
     744:	0001f900 	call	1f90 <alt_dev_llist_insert>
}
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     75c:	defffd04 	addi	sp,sp,-12
     760:	dfc00215 	stw	ra,8(sp)
     764:	df000115 	stw	fp,4(sp)
     768:	df000104 	addi	fp,sp,4
     76c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
     770:	00029f00 	call	29f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     774:	00800044 	movi	r2,1
     778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     77c:	e037883a 	mov	sp,fp
     780:	dfc00117 	ldw	ra,4(sp)
     784:	df000017 	ldw	fp,0(sp)
     788:	dec00204 	addi	sp,sp,8
     78c:	f800283a 	ret

00000790 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     790:	defffe04 	addi	sp,sp,-8
     794:	dfc00115 	stw	ra,4(sp)
     798:	df000015 	stw	fp,0(sp)
     79c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     7a0:	01000034 	movhi	r4,0
     7a4:	210ce304 	addi	r4,r4,13196
     7a8:	000b883a 	mov	r5,zero
     7ac:	000d883a 	mov	r6,zero
     7b0:	00009600 	call	960 <altera_avalon_jtag_uart_init>
     7b4:	01000034 	movhi	r4,0
     7b8:	210cd904 	addi	r4,r4,13156
     7bc:	00007240 	call	724 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
     7c0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
     7c4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
     7c8:	01000034 	movhi	r4,0
     7cc:	2110fb04 	addi	r4,r4,17388
     7d0:	000b883a 	mov	r5,zero
     7d4:	01800084 	movi	r6,2
     7d8:	00013580 	call	1358 <altera_avalon_uart_init>
     7dc:	01000034 	movhi	r4,0
     7e0:	2110f104 	addi	r4,r4,17348
     7e4:	00007240 	call	724 <alt_dev_reg>
}
     7e8:	e037883a 	mov	sp,fp
     7ec:	dfc00117 	ldw	ra,4(sp)
     7f0:	df000017 	ldw	fp,0(sp)
     7f4:	dec00204 	addi	sp,sp,8
     7f8:	f800283a 	ret

000007fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     7fc:	defffa04 	addi	sp,sp,-24
     800:	dfc00515 	stw	ra,20(sp)
     804:	df000415 	stw	fp,16(sp)
     808:	df000404 	addi	fp,sp,16
     80c:	e13ffd15 	stw	r4,-12(fp)
     810:	e17ffe15 	stw	r5,-8(fp)
     814:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     818:	e0bffd17 	ldw	r2,-12(fp)
     81c:	10800017 	ldw	r2,0(r2)
     820:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00a04 	addi	r3,r2,40
     82c:	e0bffd17 	ldw	r2,-12(fp)
     830:	10800217 	ldw	r2,8(r2)
     834:	1809883a 	mov	r4,r3
     838:	e17ffe17 	ldw	r5,-8(fp)
     83c:	e1bfff17 	ldw	r6,-4(fp)
     840:	100f883a 	mov	r7,r2
     844:	0000e240 	call	e24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     848:	e037883a 	mov	sp,fp
     84c:	dfc00117 	ldw	ra,4(sp)
     850:	df000017 	ldw	fp,0(sp)
     854:	dec00204 	addi	sp,sp,8
     858:	f800283a 	ret

0000085c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     85c:	defffa04 	addi	sp,sp,-24
     860:	dfc00515 	stw	ra,20(sp)
     864:	df000415 	stw	fp,16(sp)
     868:	df000404 	addi	fp,sp,16
     86c:	e13ffd15 	stw	r4,-12(fp)
     870:	e17ffe15 	stw	r5,-8(fp)
     874:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     878:	e0bffd17 	ldw	r2,-12(fp)
     87c:	10800017 	ldw	r2,0(r2)
     880:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     884:	e0bffc17 	ldw	r2,-16(fp)
     888:	10c00a04 	addi	r3,r2,40
     88c:	e0bffd17 	ldw	r2,-12(fp)
     890:	10800217 	ldw	r2,8(r2)
     894:	1809883a 	mov	r4,r3
     898:	e17ffe17 	ldw	r5,-8(fp)
     89c:	e1bfff17 	ldw	r6,-4(fp)
     8a0:	100f883a 	mov	r7,r2
     8a4:	00010300 	call	1030 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     8a8:	e037883a 	mov	sp,fp
     8ac:	dfc00117 	ldw	ra,4(sp)
     8b0:	df000017 	ldw	fp,0(sp)
     8b4:	dec00204 	addi	sp,sp,8
     8b8:	f800283a 	ret

000008bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     8bc:	defffc04 	addi	sp,sp,-16
     8c0:	dfc00315 	stw	ra,12(sp)
     8c4:	df000215 	stw	fp,8(sp)
     8c8:	df000204 	addi	fp,sp,8
     8cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     8d0:	e0bfff17 	ldw	r2,-4(fp)
     8d4:	10800017 	ldw	r2,0(r2)
     8d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     8dc:	e0bffe17 	ldw	r2,-8(fp)
     8e0:	10c00a04 	addi	r3,r2,40
     8e4:	e0bfff17 	ldw	r2,-4(fp)
     8e8:	10800217 	ldw	r2,8(r2)
     8ec:	1809883a 	mov	r4,r3
     8f0:	100b883a 	mov	r5,r2
     8f4:	0000cd00 	call	cd0 <altera_avalon_jtag_uart_close>
}
     8f8:	e037883a 	mov	sp,fp
     8fc:	dfc00117 	ldw	ra,4(sp)
     900:	df000017 	ldw	fp,0(sp)
     904:	dec00204 	addi	sp,sp,8
     908:	f800283a 	ret

0000090c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     90c:	defffa04 	addi	sp,sp,-24
     910:	dfc00515 	stw	ra,20(sp)
     914:	df000415 	stw	fp,16(sp)
     918:	df000404 	addi	fp,sp,16
     91c:	e13ffd15 	stw	r4,-12(fp)
     920:	e17ffe15 	stw	r5,-8(fp)
     924:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     928:	e0bffd17 	ldw	r2,-12(fp)
     92c:	10800017 	ldw	r2,0(r2)
     930:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     934:	e0bffc17 	ldw	r2,-16(fp)
     938:	10800a04 	addi	r2,r2,40
     93c:	1009883a 	mov	r4,r2
     940:	e17ffe17 	ldw	r5,-8(fp)
     944:	e1bfff17 	ldw	r6,-4(fp)
     948:	0000d380 	call	d38 <altera_avalon_jtag_uart_ioctl>
}
     94c:	e037883a 	mov	sp,fp
     950:	dfc00117 	ldw	ra,4(sp)
     954:	df000017 	ldw	fp,0(sp)
     958:	dec00204 	addi	sp,sp,8
     95c:	f800283a 	ret

00000960 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     960:	defffa04 	addi	sp,sp,-24
     964:	dfc00515 	stw	ra,20(sp)
     968:	df000415 	stw	fp,16(sp)
     96c:	df000404 	addi	fp,sp,16
     970:	e13ffd15 	stw	r4,-12(fp)
     974:	e17ffe15 	stw	r5,-8(fp)
     978:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     97c:	e0bffd17 	ldw	r2,-12(fp)
     980:	00c00044 	movi	r3,1
     984:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     988:	e0bffd17 	ldw	r2,-12(fp)
     98c:	10800017 	ldw	r2,0(r2)
     990:	10800104 	addi	r2,r2,4
     994:	1007883a 	mov	r3,r2
     998:	e0bffd17 	ldw	r2,-12(fp)
     99c:	10800817 	ldw	r2,32(r2)
     9a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     9a4:	e0fffe17 	ldw	r3,-8(fp)
     9a8:	e0bfff17 	ldw	r2,-4(fp)
     9ac:	d8000015 	stw	zero,0(sp)
     9b0:	1809883a 	mov	r4,r3
     9b4:	100b883a 	mov	r5,r2
     9b8:	01800034 	movhi	r6,0
     9bc:	31828904 	addi	r6,r6,2596
     9c0:	e1fffd17 	ldw	r7,-12(fp)
     9c4:	00021080 	call	2108 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     9c8:	e0bffd17 	ldw	r2,-12(fp)
     9cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     9d0:	e0bffd17 	ldw	r2,-12(fp)
     9d4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     9d8:	00800034 	movhi	r2,0
     9dc:	10969204 	addi	r2,r2,23112
     9e0:	10800017 	ldw	r2,0(r2)
     9e4:	1809883a 	mov	r4,r3
     9e8:	100b883a 	mov	r5,r2
     9ec:	01800034 	movhi	r6,0
     9f0:	31830a04 	addi	r6,r6,3112
     9f4:	e1fffd17 	ldw	r7,-12(fp)
     9f8:	0001b380 	call	1b38 <alt_alarm_start>
     9fc:	1000040e 	bge	r2,zero,a10 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     a00:	e0fffd17 	ldw	r3,-12(fp)
     a04:	00a00034 	movhi	r2,32768
     a08:	10bfffc4 	addi	r2,r2,-1
     a0c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     a10:	e037883a 	mov	sp,fp
     a14:	dfc00117 	ldw	ra,4(sp)
     a18:	df000017 	ldw	fp,0(sp)
     a1c:	dec00204 	addi	sp,sp,8
     a20:	f800283a 	ret

00000a24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     a24:	defff804 	addi	sp,sp,-32
     a28:	df000715 	stw	fp,28(sp)
     a2c:	df000704 	addi	fp,sp,28
     a30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     a34:	e0bfff17 	ldw	r2,-4(fp)
     a38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
     a3c:	e0bffb17 	ldw	r2,-20(fp)
     a40:	10800017 	ldw	r2,0(r2)
     a44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     a48:	e0bffc17 	ldw	r2,-16(fp)
     a4c:	10800104 	addi	r2,r2,4
     a50:	10800037 	ldwio	r2,0(r2)
     a54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     a58:	e0bffd17 	ldw	r2,-12(fp)
     a5c:	1080c00c 	andi	r2,r2,768
     a60:	1000011e 	bne	r2,zero,a68 <altera_avalon_jtag_uart_irq+0x44>
      break;
     a64:	00006c06 	br	c18 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     a68:	e0bffd17 	ldw	r2,-12(fp)
     a6c:	1080400c 	andi	r2,r2,256
     a70:	10003426 	beq	r2,zero,b44 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     a74:	00800074 	movhi	r2,1
     a78:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     a7c:	e0bffb17 	ldw	r2,-20(fp)
     a80:	10800a17 	ldw	r2,40(r2)
     a84:	10800044 	addi	r2,r2,1
     a88:	1081ffcc 	andi	r2,r2,2047
     a8c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
     a90:	e0bffb17 	ldw	r2,-20(fp)
     a94:	10c00b17 	ldw	r3,44(r2)
     a98:	e0bffe17 	ldw	r2,-8(fp)
     a9c:	1880011e 	bne	r3,r2,aa4 <altera_avalon_jtag_uart_irq+0x80>
          break;
     aa0:	00001606 	br	afc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     aa4:	e0bffc17 	ldw	r2,-16(fp)
     aa8:	10800037 	ldwio	r2,0(r2)
     aac:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     ab0:	e0bff917 	ldw	r2,-28(fp)
     ab4:	10a0000c 	andi	r2,r2,32768
     ab8:	1000011e 	bne	r2,zero,ac0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
     abc:	00000f06 	br	afc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     ac0:	e0bffb17 	ldw	r2,-20(fp)
     ac4:	10800a17 	ldw	r2,40(r2)
     ac8:	e0fff917 	ldw	r3,-28(fp)
     acc:	1809883a 	mov	r4,r3
     ad0:	e0fffb17 	ldw	r3,-20(fp)
     ad4:	1885883a 	add	r2,r3,r2
     ad8:	10800e04 	addi	r2,r2,56
     adc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     ae0:	e0bffb17 	ldw	r2,-20(fp)
     ae4:	10800a17 	ldw	r2,40(r2)
     ae8:	10800044 	addi	r2,r2,1
     aec:	10c1ffcc 	andi	r3,r2,2047
     af0:	e0bffb17 	ldw	r2,-20(fp)
     af4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     af8:	003fe006 	br	a7c <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     afc:	e0bff917 	ldw	r2,-28(fp)
     b00:	10bfffec 	andhi	r2,r2,65535
     b04:	10000f26 	beq	r2,zero,b44 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     b08:	e0bffb17 	ldw	r2,-20(fp)
     b0c:	10c00817 	ldw	r3,32(r2)
     b10:	00bfff84 	movi	r2,-2
     b14:	1886703a 	and	r3,r3,r2
     b18:	e0bffb17 	ldw	r2,-20(fp)
     b1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     b20:	e0bffc17 	ldw	r2,-16(fp)
     b24:	10800104 	addi	r2,r2,4
     b28:	1007883a 	mov	r3,r2
     b2c:	e0bffb17 	ldw	r2,-20(fp)
     b30:	10800817 	ldw	r2,32(r2)
     b34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     b38:	e0bffc17 	ldw	r2,-16(fp)
     b3c:	10800104 	addi	r2,r2,4
     b40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     b44:	e0bffd17 	ldw	r2,-12(fp)
     b48:	1080800c 	andi	r2,r2,512
     b4c:	10003126 	beq	r2,zero,c14 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     b50:	e0bffd17 	ldw	r2,-12(fp)
     b54:	1004d43a 	srli	r2,r2,16
     b58:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     b5c:	00001406 	br	bb0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     b60:	e0bffc17 	ldw	r2,-16(fp)
     b64:	e0fffb17 	ldw	r3,-20(fp)
     b68:	18c00d17 	ldw	r3,52(r3)
     b6c:	e13ffb17 	ldw	r4,-20(fp)
     b70:	20c7883a 	add	r3,r4,r3
     b74:	18c20e04 	addi	r3,r3,2104
     b78:	18c00003 	ldbu	r3,0(r3)
     b7c:	18c03fcc 	andi	r3,r3,255
     b80:	18c0201c 	xori	r3,r3,128
     b84:	18ffe004 	addi	r3,r3,-128
     b88:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     b8c:	e0bffb17 	ldw	r2,-20(fp)
     b90:	10800d17 	ldw	r2,52(r2)
     b94:	10800044 	addi	r2,r2,1
     b98:	10c1ffcc 	andi	r3,r2,2047
     b9c:	e0bffb17 	ldw	r2,-20(fp)
     ba0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     ba4:	e0bffa17 	ldw	r2,-24(fp)
     ba8:	10bfffc4 	addi	r2,r2,-1
     bac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     bb0:	e0bffa17 	ldw	r2,-24(fp)
     bb4:	10000526 	beq	r2,zero,bcc <altera_avalon_jtag_uart_irq+0x1a8>
     bb8:	e0bffb17 	ldw	r2,-20(fp)
     bbc:	10c00d17 	ldw	r3,52(r2)
     bc0:	e0bffb17 	ldw	r2,-20(fp)
     bc4:	10800c17 	ldw	r2,48(r2)
     bc8:	18bfe51e 	bne	r3,r2,b60 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     bcc:	e0bffa17 	ldw	r2,-24(fp)
     bd0:	10001026 	beq	r2,zero,c14 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     bd4:	e0bffb17 	ldw	r2,-20(fp)
     bd8:	10c00817 	ldw	r3,32(r2)
     bdc:	00bfff44 	movi	r2,-3
     be0:	1886703a 	and	r3,r3,r2
     be4:	e0bffb17 	ldw	r2,-20(fp)
     be8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     bec:	e0bffb17 	ldw	r2,-20(fp)
     bf0:	10800017 	ldw	r2,0(r2)
     bf4:	10800104 	addi	r2,r2,4
     bf8:	1007883a 	mov	r3,r2
     bfc:	e0bffb17 	ldw	r2,-20(fp)
     c00:	10800817 	ldw	r2,32(r2)
     c04:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c08:	e0bffc17 	ldw	r2,-16(fp)
     c0c:	10800104 	addi	r2,r2,4
     c10:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     c14:	003f8c06 	br	a48 <altera_avalon_jtag_uart_irq+0x24>
}
     c18:	e037883a 	mov	sp,fp
     c1c:	df000017 	ldw	fp,0(sp)
     c20:	dec00104 	addi	sp,sp,4
     c24:	f800283a 	ret

00000c28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     c28:	defff804 	addi	sp,sp,-32
     c2c:	df000715 	stw	fp,28(sp)
     c30:	df000704 	addi	fp,sp,28
     c34:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     c38:	e0bffb17 	ldw	r2,-20(fp)
     c3c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     c40:	e0bff917 	ldw	r2,-28(fp)
     c44:	10800017 	ldw	r2,0(r2)
     c48:	10800104 	addi	r2,r2,4
     c4c:	10800037 	ldwio	r2,0(r2)
     c50:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     c54:	e0bffa17 	ldw	r2,-24(fp)
     c58:	1081000c 	andi	r2,r2,1024
     c5c:	10000b26 	beq	r2,zero,c8c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     c60:	e0bff917 	ldw	r2,-28(fp)
     c64:	10800017 	ldw	r2,0(r2)
     c68:	10800104 	addi	r2,r2,4
     c6c:	1007883a 	mov	r3,r2
     c70:	e0bff917 	ldw	r2,-28(fp)
     c74:	10800817 	ldw	r2,32(r2)
     c78:	10810014 	ori	r2,r2,1024
     c7c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     c80:	e0bff917 	ldw	r2,-28(fp)
     c84:	10000915 	stw	zero,36(r2)
     c88:	00000a06 	br	cb4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     c8c:	e0bff917 	ldw	r2,-28(fp)
     c90:	10c00917 	ldw	r3,36(r2)
     c94:	00a00034 	movhi	r2,32768
     c98:	10bfff04 	addi	r2,r2,-4
     c9c:	10c00536 	bltu	r2,r3,cb4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
     ca0:	e0bff917 	ldw	r2,-28(fp)
     ca4:	10800917 	ldw	r2,36(r2)
     ca8:	10c00044 	addi	r3,r2,1
     cac:	e0bff917 	ldw	r2,-28(fp)
     cb0:	10c00915 	stw	r3,36(r2)
     cb4:	00800034 	movhi	r2,0
     cb8:	10969204 	addi	r2,r2,23112
     cbc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     cc0:	e037883a 	mov	sp,fp
     cc4:	df000017 	ldw	fp,0(sp)
     cc8:	dec00104 	addi	sp,sp,4
     ccc:	f800283a 	ret

00000cd0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     cd0:	defffd04 	addi	sp,sp,-12
     cd4:	df000215 	stw	fp,8(sp)
     cd8:	df000204 	addi	fp,sp,8
     cdc:	e13ffe15 	stw	r4,-8(fp)
     ce0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     ce4:	00000506 	br	cfc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
     ce8:	e0bfff17 	ldw	r2,-4(fp)
     cec:	1090000c 	andi	r2,r2,16384
     cf0:	10000226 	beq	r2,zero,cfc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
     cf4:	00bffd44 	movi	r2,-11
     cf8:	00000b06 	br	d28 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     cfc:	e0bffe17 	ldw	r2,-8(fp)
     d00:	10c00d17 	ldw	r3,52(r2)
     d04:	e0bffe17 	ldw	r2,-8(fp)
     d08:	10800c17 	ldw	r2,48(r2)
     d0c:	18800526 	beq	r3,r2,d24 <altera_avalon_jtag_uart_close+0x54>
     d10:	e0bffe17 	ldw	r2,-8(fp)
     d14:	10c00917 	ldw	r3,36(r2)
     d18:	e0bffe17 	ldw	r2,-8(fp)
     d1c:	10800117 	ldw	r2,4(r2)
     d20:	18bff136 	bltu	r3,r2,ce8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     d24:	0005883a 	mov	r2,zero
}
     d28:	e037883a 	mov	sp,fp
     d2c:	df000017 	ldw	fp,0(sp)
     d30:	dec00104 	addi	sp,sp,4
     d34:	f800283a 	ret

00000d38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     d38:	defffa04 	addi	sp,sp,-24
     d3c:	df000515 	stw	fp,20(sp)
     d40:	df000504 	addi	fp,sp,20
     d44:	e13ffd15 	stw	r4,-12(fp)
     d48:	e17ffe15 	stw	r5,-8(fp)
     d4c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
     d50:	00bff9c4 	movi	r2,-25
     d54:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
     d58:	e0bffe17 	ldw	r2,-8(fp)
     d5c:	10da8060 	cmpeqi	r3,r2,27137
     d60:	1800031e 	bne	r3,zero,d70 <altera_avalon_jtag_uart_ioctl+0x38>
     d64:	109a80a0 	cmpeqi	r2,r2,27138
     d68:	1000191e 	bne	r2,zero,dd0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
     d6c:	00002806 	br	e10 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     d70:	e0bffd17 	ldw	r2,-12(fp)
     d74:	10c00117 	ldw	r3,4(r2)
     d78:	00a00034 	movhi	r2,32768
     d7c:	10bfffc4 	addi	r2,r2,-1
     d80:	18801226 	beq	r3,r2,dcc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
     d84:	e0bfff17 	ldw	r2,-4(fp)
     d88:	10800017 	ldw	r2,0(r2)
     d8c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     d90:	e0bffc17 	ldw	r2,-16(fp)
     d94:	10800090 	cmplti	r2,r2,2
     d98:	1000061e 	bne	r2,zero,db4 <altera_avalon_jtag_uart_ioctl+0x7c>
     d9c:	e0fffc17 	ldw	r3,-16(fp)
     da0:	00a00034 	movhi	r2,32768
     da4:	10bfffc4 	addi	r2,r2,-1
     da8:	18800226 	beq	r3,r2,db4 <altera_avalon_jtag_uart_ioctl+0x7c>
     dac:	e0bffc17 	ldw	r2,-16(fp)
     db0:	00000206 	br	dbc <altera_avalon_jtag_uart_ioctl+0x84>
     db4:	00a00034 	movhi	r2,32768
     db8:	10bfff84 	addi	r2,r2,-2
     dbc:	e0fffd17 	ldw	r3,-12(fp)
     dc0:	18800115 	stw	r2,4(r3)
      rc = 0;
     dc4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     dc8:	00001106 	br	e10 <altera_avalon_jtag_uart_ioctl+0xd8>
     dcc:	00001006 	br	e10 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     dd0:	e0bffd17 	ldw	r2,-12(fp)
     dd4:	10c00117 	ldw	r3,4(r2)
     dd8:	00a00034 	movhi	r2,32768
     ddc:	10bfffc4 	addi	r2,r2,-1
     de0:	18800a26 	beq	r3,r2,e0c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     de4:	e0bffd17 	ldw	r2,-12(fp)
     de8:	10c00917 	ldw	r3,36(r2)
     dec:	e0bffd17 	ldw	r2,-12(fp)
     df0:	10800117 	ldw	r2,4(r2)
     df4:	1885803a 	cmpltu	r2,r3,r2
     df8:	10c03fcc 	andi	r3,r2,255
     dfc:	e0bfff17 	ldw	r2,-4(fp)
     e00:	10c00015 	stw	r3,0(r2)
      rc = 0;
     e04:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     e08:	00000006 	br	e0c <altera_avalon_jtag_uart_ioctl+0xd4>
     e0c:	0001883a 	nop

  default:
    break;
  }

  return rc;
     e10:	e0bffb17 	ldw	r2,-20(fp)
}
     e14:	e037883a 	mov	sp,fp
     e18:	df000017 	ldw	fp,0(sp)
     e1c:	dec00104 	addi	sp,sp,4
     e20:	f800283a 	ret

00000e24 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     e24:	defff304 	addi	sp,sp,-52
     e28:	dfc00c15 	stw	ra,48(sp)
     e2c:	df000b15 	stw	fp,44(sp)
     e30:	df000b04 	addi	fp,sp,44
     e34:	e13ffc15 	stw	r4,-16(fp)
     e38:	e17ffd15 	stw	r5,-12(fp)
     e3c:	e1bffe15 	stw	r6,-8(fp)
     e40:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
     e44:	e0bffd17 	ldw	r2,-12(fp)
     e48:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     e4c:	00004906 	br	f74 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     e50:	e0bffc17 	ldw	r2,-16(fp)
     e54:	10800a17 	ldw	r2,40(r2)
     e58:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     e5c:	e0bffc17 	ldw	r2,-16(fp)
     e60:	10800b17 	ldw	r2,44(r2)
     e64:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
     e68:	e0fff717 	ldw	r3,-36(fp)
     e6c:	e0bff817 	ldw	r2,-32(fp)
     e70:	18800536 	bltu	r3,r2,e88 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     e74:	e0fff717 	ldw	r3,-36(fp)
     e78:	e0bff817 	ldw	r2,-32(fp)
     e7c:	1885c83a 	sub	r2,r3,r2
     e80:	e0bff615 	stw	r2,-40(fp)
     e84:	00000406 	br	e98 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     e88:	00c20004 	movi	r3,2048
     e8c:	e0bff817 	ldw	r2,-32(fp)
     e90:	1885c83a 	sub	r2,r3,r2
     e94:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     e98:	e0bff617 	ldw	r2,-40(fp)
     e9c:	1000011e 	bne	r2,zero,ea4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
     ea0:	00001d06 	br	f18 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
     ea4:	e0fffe17 	ldw	r3,-8(fp)
     ea8:	e0bff617 	ldw	r2,-40(fp)
     eac:	1880022e 	bgeu	r3,r2,eb8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
     eb0:	e0bffe17 	ldw	r2,-8(fp)
     eb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     eb8:	e0bff817 	ldw	r2,-32(fp)
     ebc:	10800e04 	addi	r2,r2,56
     ec0:	e0fffc17 	ldw	r3,-16(fp)
     ec4:	1885883a 	add	r2,r3,r2
     ec8:	e13ff517 	ldw	r4,-44(fp)
     ecc:	100b883a 	mov	r5,r2
     ed0:	e1bff617 	ldw	r6,-40(fp)
     ed4:	0002d880 	call	2d88 <memcpy>
      ptr   += n;
     ed8:	e0fff517 	ldw	r3,-44(fp)
     edc:	e0bff617 	ldw	r2,-40(fp)
     ee0:	1885883a 	add	r2,r3,r2
     ee4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
     ee8:	e0fffe17 	ldw	r3,-8(fp)
     eec:	e0bff617 	ldw	r2,-40(fp)
     ef0:	1885c83a 	sub	r2,r3,r2
     ef4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     ef8:	e0fff817 	ldw	r3,-32(fp)
     efc:	e0bff617 	ldw	r2,-40(fp)
     f00:	1885883a 	add	r2,r3,r2
     f04:	10c1ffcc 	andi	r3,r2,2047
     f08:	e0bffc17 	ldw	r2,-16(fp)
     f0c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     f10:	e0bffe17 	ldw	r2,-8(fp)
     f14:	00bfce16 	blt	zero,r2,e50 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
     f18:	e0fff517 	ldw	r3,-44(fp)
     f1c:	e0bffd17 	ldw	r2,-12(fp)
     f20:	18800126 	beq	r3,r2,f28 <altera_avalon_jtag_uart_read+0x104>
      break;
     f24:	00001506 	br	f7c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     f28:	e0bfff17 	ldw	r2,-4(fp)
     f2c:	1090000c 	andi	r2,r2,16384
     f30:	10000126 	beq	r2,zero,f38 <altera_avalon_jtag_uart_read+0x114>
      break;
     f34:	00001106 	br	f7c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     f38:	0001883a 	nop
     f3c:	e0bffc17 	ldw	r2,-16(fp)
     f40:	10c00a17 	ldw	r3,40(r2)
     f44:	e0bff717 	ldw	r2,-36(fp)
     f48:	1880051e 	bne	r3,r2,f60 <altera_avalon_jtag_uart_read+0x13c>
     f4c:	e0bffc17 	ldw	r2,-16(fp)
     f50:	10c00917 	ldw	r3,36(r2)
     f54:	e0bffc17 	ldw	r2,-16(fp)
     f58:	10800117 	ldw	r2,4(r2)
     f5c:	18bff736 	bltu	r3,r2,f3c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     f60:	e0bffc17 	ldw	r2,-16(fp)
     f64:	10c00a17 	ldw	r3,40(r2)
     f68:	e0bff717 	ldw	r2,-36(fp)
     f6c:	1880011e 	bne	r3,r2,f74 <altera_avalon_jtag_uart_read+0x150>
      break;
     f70:	00000206 	br	f7c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     f74:	e0bffe17 	ldw	r2,-8(fp)
     f78:	00bfb516 	blt	zero,r2,e50 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     f7c:	e0fff517 	ldw	r3,-44(fp)
     f80:	e0bffd17 	ldw	r2,-12(fp)
     f84:	18801826 	beq	r3,r2,fe8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     f88:	0005303a 	rdctl	r2,status
     f8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     f90:	e0fffa17 	ldw	r3,-24(fp)
     f94:	00bfff84 	movi	r2,-2
     f98:	1884703a 	and	r2,r3,r2
     f9c:	1001703a 	wrctl	status,r2
  
  return context;
     fa0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     fa4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     fa8:	e0bffc17 	ldw	r2,-16(fp)
     fac:	10800817 	ldw	r2,32(r2)
     fb0:	10c00054 	ori	r3,r2,1
     fb4:	e0bffc17 	ldw	r2,-16(fp)
     fb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     fbc:	e0bffc17 	ldw	r2,-16(fp)
     fc0:	10800017 	ldw	r2,0(r2)
     fc4:	10800104 	addi	r2,r2,4
     fc8:	1007883a 	mov	r3,r2
     fcc:	e0bffc17 	ldw	r2,-16(fp)
     fd0:	10800817 	ldw	r2,32(r2)
     fd4:	18800035 	stwio	r2,0(r3)
     fd8:	e0bff917 	ldw	r2,-28(fp)
     fdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     fe0:	e0bffb17 	ldw	r2,-20(fp)
     fe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     fe8:	e0fff517 	ldw	r3,-44(fp)
     fec:	e0bffd17 	ldw	r2,-12(fp)
     ff0:	18800426 	beq	r3,r2,1004 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
     ff4:	e0fff517 	ldw	r3,-44(fp)
     ff8:	e0bffd17 	ldw	r2,-12(fp)
     ffc:	1885c83a 	sub	r2,r3,r2
    1000:	00000606 	br	101c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    1004:	e0bfff17 	ldw	r2,-4(fp)
    1008:	1090000c 	andi	r2,r2,16384
    100c:	10000226 	beq	r2,zero,1018 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    1010:	00bffd44 	movi	r2,-11
    1014:	00000106 	br	101c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    1018:	00bffec4 	movi	r2,-5
}
    101c:	e037883a 	mov	sp,fp
    1020:	dfc00117 	ldw	ra,4(sp)
    1024:	df000017 	ldw	fp,0(sp)
    1028:	dec00204 	addi	sp,sp,8
    102c:	f800283a 	ret

00001030 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1030:	defff304 	addi	sp,sp,-52
    1034:	dfc00c15 	stw	ra,48(sp)
    1038:	df000b15 	stw	fp,44(sp)
    103c:	df000b04 	addi	fp,sp,44
    1040:	e13ffc15 	stw	r4,-16(fp)
    1044:	e17ffd15 	stw	r5,-12(fp)
    1048:	e1bffe15 	stw	r6,-8(fp)
    104c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1050:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1054:	e0bffd17 	ldw	r2,-12(fp)
    1058:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    105c:	00003806 	br	1140 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1060:	e0bffc17 	ldw	r2,-16(fp)
    1064:	10800c17 	ldw	r2,48(r2)
    1068:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    106c:	e0bffc17 	ldw	r2,-16(fp)
    1070:	10800d17 	ldw	r2,52(r2)
    1074:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    1078:	e0fff817 	ldw	r3,-32(fp)
    107c:	e0bff517 	ldw	r2,-44(fp)
    1080:	1880062e 	bgeu	r3,r2,109c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1084:	e0fff517 	ldw	r3,-44(fp)
    1088:	e0bff817 	ldw	r2,-32(fp)
    108c:	1885c83a 	sub	r2,r3,r2
    1090:	10bfffc4 	addi	r2,r2,-1
    1094:	e0bff615 	stw	r2,-40(fp)
    1098:	00000b06 	br	10c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    109c:	e0bff517 	ldw	r2,-44(fp)
    10a0:	10000526 	beq	r2,zero,10b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    10a4:	00c20004 	movi	r3,2048
    10a8:	e0bff817 	ldw	r2,-32(fp)
    10ac:	1885c83a 	sub	r2,r3,r2
    10b0:	e0bff615 	stw	r2,-40(fp)
    10b4:	00000406 	br	10c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    10b8:	00c1ffc4 	movi	r3,2047
    10bc:	e0bff817 	ldw	r2,-32(fp)
    10c0:	1885c83a 	sub	r2,r3,r2
    10c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    10c8:	e0bff617 	ldw	r2,-40(fp)
    10cc:	1000011e 	bne	r2,zero,10d4 <altera_avalon_jtag_uart_write+0xa4>
        break;
    10d0:	00001d06 	br	1148 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    10d4:	e0fffe17 	ldw	r3,-8(fp)
    10d8:	e0bff617 	ldw	r2,-40(fp)
    10dc:	1880022e 	bgeu	r3,r2,10e8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    10e0:	e0bffe17 	ldw	r2,-8(fp)
    10e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    10e8:	e0bff817 	ldw	r2,-32(fp)
    10ec:	10820e04 	addi	r2,r2,2104
    10f0:	e0fffc17 	ldw	r3,-16(fp)
    10f4:	1885883a 	add	r2,r3,r2
    10f8:	1009883a 	mov	r4,r2
    10fc:	e17ffd17 	ldw	r5,-12(fp)
    1100:	e1bff617 	ldw	r6,-40(fp)
    1104:	0002d880 	call	2d88 <memcpy>
      ptr   += n;
    1108:	e0fffd17 	ldw	r3,-12(fp)
    110c:	e0bff617 	ldw	r2,-40(fp)
    1110:	1885883a 	add	r2,r3,r2
    1114:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    1118:	e0fffe17 	ldw	r3,-8(fp)
    111c:	e0bff617 	ldw	r2,-40(fp)
    1120:	1885c83a 	sub	r2,r3,r2
    1124:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1128:	e0fff817 	ldw	r3,-32(fp)
    112c:	e0bff617 	ldw	r2,-40(fp)
    1130:	1885883a 	add	r2,r3,r2
    1134:	10c1ffcc 	andi	r3,r2,2047
    1138:	e0bffc17 	ldw	r2,-16(fp)
    113c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1140:	e0bffe17 	ldw	r2,-8(fp)
    1144:	00bfc616 	blt	zero,r2,1060 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1148:	0005303a 	rdctl	r2,status
    114c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1150:	e0fffa17 	ldw	r3,-24(fp)
    1154:	00bfff84 	movi	r2,-2
    1158:	1884703a 	and	r2,r3,r2
    115c:	1001703a 	wrctl	status,r2
  
  return context;
    1160:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1164:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1168:	e0bffc17 	ldw	r2,-16(fp)
    116c:	10800817 	ldw	r2,32(r2)
    1170:	10c00094 	ori	r3,r2,2
    1174:	e0bffc17 	ldw	r2,-16(fp)
    1178:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    117c:	e0bffc17 	ldw	r2,-16(fp)
    1180:	10800017 	ldw	r2,0(r2)
    1184:	10800104 	addi	r2,r2,4
    1188:	1007883a 	mov	r3,r2
    118c:	e0bffc17 	ldw	r2,-16(fp)
    1190:	10800817 	ldw	r2,32(r2)
    1194:	18800035 	stwio	r2,0(r3)
    1198:	e0bff917 	ldw	r2,-28(fp)
    119c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    11a0:	e0bffb17 	ldw	r2,-20(fp)
    11a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    11a8:	e0bffe17 	ldw	r2,-8(fp)
    11ac:	0080120e 	bge	zero,r2,11f8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    11b0:	e0bfff17 	ldw	r2,-4(fp)
    11b4:	1090000c 	andi	r2,r2,16384
    11b8:	10000126 	beq	r2,zero,11c0 <altera_avalon_jtag_uart_write+0x190>
        break;
    11bc:	00001006 	br	1200 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    11c0:	0001883a 	nop
    11c4:	e0bffc17 	ldw	r2,-16(fp)
    11c8:	10c00d17 	ldw	r3,52(r2)
    11cc:	e0bff517 	ldw	r2,-44(fp)
    11d0:	1880051e 	bne	r3,r2,11e8 <altera_avalon_jtag_uart_write+0x1b8>
    11d4:	e0bffc17 	ldw	r2,-16(fp)
    11d8:	10c00917 	ldw	r3,36(r2)
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	10800117 	ldw	r2,4(r2)
    11e4:	18bff736 	bltu	r3,r2,11c4 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    11e8:	e0bffc17 	ldw	r2,-16(fp)
    11ec:	10800917 	ldw	r2,36(r2)
    11f0:	10000126 	beq	r2,zero,11f8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    11f4:	00000206 	br	1200 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    11f8:	e0bffe17 	ldw	r2,-8(fp)
    11fc:	00bf9716 	blt	zero,r2,105c <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1200:	e0fffd17 	ldw	r3,-12(fp)
    1204:	e0bff717 	ldw	r2,-36(fp)
    1208:	18800426 	beq	r3,r2,121c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    120c:	e0fffd17 	ldw	r3,-12(fp)
    1210:	e0bff717 	ldw	r2,-36(fp)
    1214:	1885c83a 	sub	r2,r3,r2
    1218:	00000606 	br	1234 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    121c:	e0bfff17 	ldw	r2,-4(fp)
    1220:	1090000c 	andi	r2,r2,16384
    1224:	10000226 	beq	r2,zero,1230 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    1228:	00bffd44 	movi	r2,-11
    122c:	00000106 	br	1234 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1230:	00bffec4 	movi	r2,-5
}
    1234:	e037883a 	mov	sp,fp
    1238:	dfc00117 	ldw	ra,4(sp)
    123c:	df000017 	ldw	fp,0(sp)
    1240:	dec00204 	addi	sp,sp,8
    1244:	f800283a 	ret

00001248 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1248:	defffa04 	addi	sp,sp,-24
    124c:	dfc00515 	stw	ra,20(sp)
    1250:	df000415 	stw	fp,16(sp)
    1254:	df000404 	addi	fp,sp,16
    1258:	e13ffd15 	stw	r4,-12(fp)
    125c:	e17ffe15 	stw	r5,-8(fp)
    1260:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    1264:	e0bffd17 	ldw	r2,-12(fp)
    1268:	10800017 	ldw	r2,0(r2)
    126c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    1270:	e0bffc17 	ldw	r2,-16(fp)
    1274:	10c00a04 	addi	r3,r2,40
    1278:	e0bffd17 	ldw	r2,-12(fp)
    127c:	10800217 	ldw	r2,8(r2)
    1280:	1809883a 	mov	r4,r3
    1284:	e17ffe17 	ldw	r5,-8(fp)
    1288:	e1bfff17 	ldw	r6,-4(fp)
    128c:	100f883a 	mov	r7,r2
    1290:	00017600 	call	1760 <altera_avalon_uart_read>
      fd->fd_flags);
}
    1294:	e037883a 	mov	sp,fp
    1298:	dfc00117 	ldw	ra,4(sp)
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00204 	addi	sp,sp,8
    12a4:	f800283a 	ret

000012a8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    12a8:	defffa04 	addi	sp,sp,-24
    12ac:	dfc00515 	stw	ra,20(sp)
    12b0:	df000415 	stw	fp,16(sp)
    12b4:	df000404 	addi	fp,sp,16
    12b8:	e13ffd15 	stw	r4,-12(fp)
    12bc:	e17ffe15 	stw	r5,-8(fp)
    12c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    12c4:	e0bffd17 	ldw	r2,-12(fp)
    12c8:	10800017 	ldw	r2,0(r2)
    12cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    12d0:	e0bffc17 	ldw	r2,-16(fp)
    12d4:	10c00a04 	addi	r3,r2,40
    12d8:	e0bffd17 	ldw	r2,-12(fp)
    12dc:	10800217 	ldw	r2,8(r2)
    12e0:	1809883a 	mov	r4,r3
    12e4:	e17ffe17 	ldw	r5,-8(fp)
    12e8:	e1bfff17 	ldw	r6,-4(fp)
    12ec:	100f883a 	mov	r7,r2
    12f0:	000198c0 	call	198c <altera_avalon_uart_write>
      fd->fd_flags);
}
    12f4:	e037883a 	mov	sp,fp
    12f8:	dfc00117 	ldw	ra,4(sp)
    12fc:	df000017 	ldw	fp,0(sp)
    1300:	dec00204 	addi	sp,sp,8
    1304:	f800283a 	ret

00001308 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    1308:	defffc04 	addi	sp,sp,-16
    130c:	dfc00315 	stw	ra,12(sp)
    1310:	df000215 	stw	fp,8(sp)
    1314:	df000204 	addi	fp,sp,8
    1318:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    131c:	e0bfff17 	ldw	r2,-4(fp)
    1320:	10800017 	ldw	r2,0(r2)
    1324:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    1328:	e0bffe17 	ldw	r2,-8(fp)
    132c:	10c00a04 	addi	r3,r2,40
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	10800217 	ldw	r2,8(r2)
    1338:	1809883a 	mov	r4,r3
    133c:	100b883a 	mov	r5,r2
    1340:	00016bc0 	call	16bc <altera_avalon_uart_close>
}
    1344:	e037883a 	mov	sp,fp
    1348:	dfc00117 	ldw	ra,4(sp)
    134c:	df000017 	ldw	fp,0(sp)
    1350:	dec00204 	addi	sp,sp,8
    1354:	f800283a 	ret

00001358 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    1358:	defff804 	addi	sp,sp,-32
    135c:	dfc00715 	stw	ra,28(sp)
    1360:	df000615 	stw	fp,24(sp)
    1364:	df000604 	addi	fp,sp,24
    1368:	e13ffd15 	stw	r4,-12(fp)
    136c:	e17ffe15 	stw	r5,-8(fp)
    1370:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
    1374:	e0bffd17 	ldw	r2,-12(fp)
    1378:	10800017 	ldw	r2,0(r2)
    137c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    1380:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    1384:	1000041e 	bne	r2,zero,1398 <altera_avalon_uart_init+0x40>
    1388:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    138c:	1000021e 	bne	r2,zero,1398 <altera_avalon_uart_init+0x40>
    1390:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    1394:	10000226 	beq	r2,zero,13a0 <altera_avalon_uart_init+0x48>
    1398:	00800044 	movi	r2,1
    139c:	00000106 	br	13a4 <altera_avalon_uart_init+0x4c>
    13a0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    13a4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    13a8:	e0bffc17 	ldw	r2,-16(fp)
    13ac:	10000f1e 	bne	r2,zero,13ec <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    13b0:	e0bffd17 	ldw	r2,-12(fp)
    13b4:	00c32004 	movi	r3,3200
    13b8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    13bc:	e0bffb17 	ldw	r2,-20(fp)
    13c0:	10800304 	addi	r2,r2,12
    13c4:	e0fffd17 	ldw	r3,-12(fp)
    13c8:	18c00117 	ldw	r3,4(r3)
    13cc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    13d0:	d8000015 	stw	zero,0(sp)
    13d4:	e13ffe17 	ldw	r4,-8(fp)
    13d8:	e17fff17 	ldw	r5,-4(fp)
    13dc:	01800034 	movhi	r6,0
    13e0:	31850004 	addi	r6,r6,5120
    13e4:	e1fffd17 	ldw	r7,-12(fp)
    13e8:	00021080 	call	2108 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    13ec:	e037883a 	mov	sp,fp
    13f0:	dfc00117 	ldw	ra,4(sp)
    13f4:	df000017 	ldw	fp,0(sp)
    13f8:	dec00204 	addi	sp,sp,8
    13fc:	f800283a 	ret

00001400 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    1400:	defffa04 	addi	sp,sp,-24
    1404:	dfc00515 	stw	ra,20(sp)
    1408:	df000415 	stw	fp,16(sp)
    140c:	df000404 	addi	fp,sp,16
    1410:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    1414:	e0bfff17 	ldw	r2,-4(fp)
    1418:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
    141c:	e0bffc17 	ldw	r2,-16(fp)
    1420:	10800017 	ldw	r2,0(r2)
    1424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    1428:	e0bffd17 	ldw	r2,-12(fp)
    142c:	10800204 	addi	r2,r2,8
    1430:	10800037 	ldwio	r2,0(r2)
    1434:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    1438:	e0bffd17 	ldw	r2,-12(fp)
    143c:	10800204 	addi	r2,r2,8
    1440:	0007883a 	mov	r3,zero
    1444:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    1448:	e0bffd17 	ldw	r2,-12(fp)
    144c:	10800204 	addi	r2,r2,8
    1450:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    1454:	e0bffe17 	ldw	r2,-8(fp)
    1458:	1080200c 	andi	r2,r2,128
    145c:	10000326 	beq	r2,zero,146c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    1460:	e13ffc17 	ldw	r4,-16(fp)
    1464:	e17ffe17 	ldw	r5,-8(fp)
    1468:	00014980 	call	1498 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    146c:	e0bffe17 	ldw	r2,-8(fp)
    1470:	1081100c 	andi	r2,r2,1088
    1474:	10000326 	beq	r2,zero,1484 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    1478:	e13ffc17 	ldw	r4,-16(fp)
    147c:	e17ffe17 	ldw	r5,-8(fp)
    1480:	00015780 	call	1578 <altera_avalon_uart_txirq>
  }
  

}
    1484:	e037883a 	mov	sp,fp
    1488:	dfc00117 	ldw	ra,4(sp)
    148c:	df000017 	ldw	fp,0(sp)
    1490:	dec00204 	addi	sp,sp,8
    1494:	f800283a 	ret

00001498 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    1498:	defffc04 	addi	sp,sp,-16
    149c:	df000315 	stw	fp,12(sp)
    14a0:	df000304 	addi	fp,sp,12
    14a4:	e13ffe15 	stw	r4,-8(fp)
    14a8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    14ac:	e0bfff17 	ldw	r2,-4(fp)
    14b0:	108000cc 	andi	r2,r2,3
    14b4:	10000126 	beq	r2,zero,14bc <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
    14b8:	00002b06 	br	1568 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    14bc:	e0bffe17 	ldw	r2,-8(fp)
    14c0:	10800317 	ldw	r2,12(r2)
    14c4:	e0bffe17 	ldw	r2,-8(fp)
    14c8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    14cc:	e0bffe17 	ldw	r2,-8(fp)
    14d0:	10800317 	ldw	r2,12(r2)
    14d4:	10800044 	addi	r2,r2,1
    14d8:	10800fcc 	andi	r2,r2,63
    14dc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    14e0:	e0bffe17 	ldw	r2,-8(fp)
    14e4:	10800317 	ldw	r2,12(r2)
    14e8:	e0fffe17 	ldw	r3,-8(fp)
    14ec:	18c00017 	ldw	r3,0(r3)
    14f0:	18c00037 	ldwio	r3,0(r3)
    14f4:	1809883a 	mov	r4,r3
    14f8:	e0fffe17 	ldw	r3,-8(fp)
    14fc:	1885883a 	add	r2,r3,r2
    1500:	10800704 	addi	r2,r2,28
    1504:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
    1508:	e0bffe17 	ldw	r2,-8(fp)
    150c:	e0fffd17 	ldw	r3,-12(fp)
    1510:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    1514:	e0bffe17 	ldw	r2,-8(fp)
    1518:	10800317 	ldw	r2,12(r2)
    151c:	10800044 	addi	r2,r2,1
    1520:	10800fcc 	andi	r2,r2,63
    1524:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    1528:	e0bffe17 	ldw	r2,-8(fp)
    152c:	10c00217 	ldw	r3,8(r2)
    1530:	e0bffd17 	ldw	r2,-12(fp)
    1534:	18800c1e 	bne	r3,r2,1568 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    1538:	e0bffe17 	ldw	r2,-8(fp)
    153c:	10c00117 	ldw	r3,4(r2)
    1540:	00bfdfc4 	movi	r2,-129
    1544:	1886703a 	and	r3,r3,r2
    1548:	e0bffe17 	ldw	r2,-8(fp)
    154c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    1550:	e0bffe17 	ldw	r2,-8(fp)
    1554:	10800017 	ldw	r2,0(r2)
    1558:	10800304 	addi	r2,r2,12
    155c:	e0fffe17 	ldw	r3,-8(fp)
    1560:	18c00117 	ldw	r3,4(r3)
    1564:	10c00035 	stwio	r3,0(r2)
  }   
}
    1568:	e037883a 	mov	sp,fp
    156c:	df000017 	ldw	fp,0(sp)
    1570:	dec00104 	addi	sp,sp,4
    1574:	f800283a 	ret

00001578 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    1578:	defffb04 	addi	sp,sp,-20
    157c:	df000415 	stw	fp,16(sp)
    1580:	df000404 	addi	fp,sp,16
    1584:	e13ffc15 	stw	r4,-16(fp)
    1588:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    158c:	e0bffc17 	ldw	r2,-16(fp)
    1590:	10c00417 	ldw	r3,16(r2)
    1594:	e0bffc17 	ldw	r2,-16(fp)
    1598:	10800517 	ldw	r2,20(r2)
    159c:	18803226 	beq	r3,r2,1668 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    15a0:	e0bffc17 	ldw	r2,-16(fp)
    15a4:	10800617 	ldw	r2,24(r2)
    15a8:	1080008c 	andi	r2,r2,2
    15ac:	10000326 	beq	r2,zero,15bc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    15b0:	e0bffd17 	ldw	r2,-12(fp)
    15b4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    15b8:	10001d26 	beq	r2,zero,1630 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    15bc:	e0bffc17 	ldw	r2,-16(fp)
    15c0:	10800417 	ldw	r2,16(r2)
    15c4:	e0bffc17 	ldw	r2,-16(fp)
    15c8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    15cc:	e0bffc17 	ldw	r2,-16(fp)
    15d0:	10800017 	ldw	r2,0(r2)
    15d4:	10800104 	addi	r2,r2,4
    15d8:	e0fffc17 	ldw	r3,-16(fp)
    15dc:	18c00417 	ldw	r3,16(r3)
    15e0:	e13ffc17 	ldw	r4,-16(fp)
    15e4:	20c7883a 	add	r3,r4,r3
    15e8:	18c01704 	addi	r3,r3,92
    15ec:	18c00003 	ldbu	r3,0(r3)
    15f0:	18c03fcc 	andi	r3,r3,255
    15f4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    15f8:	e0bffc17 	ldw	r2,-16(fp)
    15fc:	10800417 	ldw	r2,16(r2)
    1600:	10800044 	addi	r2,r2,1
    1604:	e0fffc17 	ldw	r3,-16(fp)
    1608:	18800415 	stw	r2,16(r3)
    160c:	10c00fcc 	andi	r3,r2,63
    1610:	e0bffc17 	ldw	r2,-16(fp)
    1614:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    1618:	e0bffc17 	ldw	r2,-16(fp)
    161c:	10800117 	ldw	r2,4(r2)
    1620:	10c01014 	ori	r3,r2,64
    1624:	e0bffc17 	ldw	r2,-16(fp)
    1628:	10c00115 	stw	r3,4(r2)
    162c:	00000e06 	br	1668 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    1630:	e0bffc17 	ldw	r2,-16(fp)
    1634:	10800017 	ldw	r2,0(r2)
    1638:	10800204 	addi	r2,r2,8
    163c:	10800037 	ldwio	r2,0(r2)
    1640:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    1644:	e0bffd17 	ldw	r2,-12(fp)
    1648:	1082000c 	andi	r2,r2,2048
    164c:	1000061e 	bne	r2,zero,1668 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    1650:	e0bffc17 	ldw	r2,-16(fp)
    1654:	10c00117 	ldw	r3,4(r2)
    1658:	00bfefc4 	movi	r2,-65
    165c:	1886703a 	and	r3,r3,r2
    1660:	e0bffc17 	ldw	r2,-16(fp)
    1664:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    1668:	e0bffc17 	ldw	r2,-16(fp)
    166c:	10c00417 	ldw	r3,16(r2)
    1670:	e0bffc17 	ldw	r2,-16(fp)
    1674:	10800517 	ldw	r2,20(r2)
    1678:	1880061e 	bne	r3,r2,1694 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    167c:	e0bffc17 	ldw	r2,-16(fp)
    1680:	10c00117 	ldw	r3,4(r2)
    1684:	00beefc4 	movi	r2,-1089
    1688:	1886703a 	and	r3,r3,r2
    168c:	e0bffc17 	ldw	r2,-16(fp)
    1690:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1694:	e0bffc17 	ldw	r2,-16(fp)
    1698:	10800017 	ldw	r2,0(r2)
    169c:	10800304 	addi	r2,r2,12
    16a0:	e0fffc17 	ldw	r3,-16(fp)
    16a4:	18c00117 	ldw	r3,4(r3)
    16a8:	10c00035 	stwio	r3,0(r2)
}
    16ac:	e037883a 	mov	sp,fp
    16b0:	df000017 	ldw	fp,0(sp)
    16b4:	dec00104 	addi	sp,sp,4
    16b8:	f800283a 	ret

000016bc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    16bc:	defffd04 	addi	sp,sp,-12
    16c0:	df000215 	stw	fp,8(sp)
    16c4:	df000204 	addi	fp,sp,8
    16c8:	e13ffe15 	stw	r4,-8(fp)
    16cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    16d0:	00000506 	br	16e8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    16d4:	e0bfff17 	ldw	r2,-4(fp)
    16d8:	1090000c 	andi	r2,r2,16384
    16dc:	10000226 	beq	r2,zero,16e8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
    16e0:	00bffd44 	movi	r2,-11
    16e4:	00000606 	br	1700 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    16e8:	e0bffe17 	ldw	r2,-8(fp)
    16ec:	10c00417 	ldw	r3,16(r2)
    16f0:	e0bffe17 	ldw	r2,-8(fp)
    16f4:	10800517 	ldw	r2,20(r2)
    16f8:	18bff61e 	bne	r3,r2,16d4 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    16fc:	0005883a 	mov	r2,zero
}
    1700:	e037883a 	mov	sp,fp
    1704:	df000017 	ldw	fp,0(sp)
    1708:	dec00104 	addi	sp,sp,4
    170c:	f800283a 	ret

00001710 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1710:	defffe04 	addi	sp,sp,-8
    1714:	dfc00115 	stw	ra,4(sp)
    1718:	df000015 	stw	fp,0(sp)
    171c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1720:	00800034 	movhi	r2,0
    1724:	10919304 	addi	r2,r2,17996
    1728:	10800017 	ldw	r2,0(r2)
    172c:	10000526 	beq	r2,zero,1744 <alt_get_errno+0x34>
    1730:	00800034 	movhi	r2,0
    1734:	10919304 	addi	r2,r2,17996
    1738:	10800017 	ldw	r2,0(r2)
    173c:	103ee83a 	callr	r2
    1740:	00000206 	br	174c <alt_get_errno+0x3c>
    1744:	00800034 	movhi	r2,0
    1748:	10968d04 	addi	r2,r2,23092
}
    174c:	e037883a 	mov	sp,fp
    1750:	dfc00117 	ldw	ra,4(sp)
    1754:	df000017 	ldw	fp,0(sp)
    1758:	dec00204 	addi	sp,sp,8
    175c:	f800283a 	ret

00001760 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    1760:	defff204 	addi	sp,sp,-56
    1764:	dfc00d15 	stw	ra,52(sp)
    1768:	df000c15 	stw	fp,48(sp)
    176c:	df000c04 	addi	fp,sp,48
    1770:	e13ffc15 	stw	r4,-16(fp)
    1774:	e17ffd15 	stw	r5,-12(fp)
    1778:	e1bffe15 	stw	r6,-8(fp)
    177c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
    1780:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
    1784:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    1788:	e0bfff17 	ldw	r2,-4(fp)
    178c:	1090000c 	andi	r2,r2,16384
    1790:	1005003a 	cmpeq	r2,r2,zero
    1794:	10803fcc 	andi	r2,r2,255
    1798:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    179c:	00001306 	br	17ec <altera_avalon_uart_read+0x8c>
    {
      count++;
    17a0:	e0bff517 	ldw	r2,-44(fp)
    17a4:	10800044 	addi	r2,r2,1
    17a8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    17ac:	e0bffd17 	ldw	r2,-12(fp)
    17b0:	10c00044 	addi	r3,r2,1
    17b4:	e0fffd15 	stw	r3,-12(fp)
    17b8:	e0fffc17 	ldw	r3,-16(fp)
    17bc:	18c00217 	ldw	r3,8(r3)
    17c0:	e13ffc17 	ldw	r4,-16(fp)
    17c4:	20c7883a 	add	r3,r4,r3
    17c8:	18c00704 	addi	r3,r3,28
    17cc:	18c00003 	ldbu	r3,0(r3)
    17d0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
    17d4:	e0bffc17 	ldw	r2,-16(fp)
    17d8:	10800217 	ldw	r2,8(r2)
    17dc:	10800044 	addi	r2,r2,1
    17e0:	10c00fcc 	andi	r3,r2,63
    17e4:	e0bffc17 	ldw	r2,-16(fp)
    17e8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    17ec:	e0fff517 	ldw	r3,-44(fp)
    17f0:	e0bffe17 	ldw	r2,-8(fp)
    17f4:	1880050e 	bge	r3,r2,180c <altera_avalon_uart_read+0xac>
    17f8:	e0bffc17 	ldw	r2,-16(fp)
    17fc:	10c00217 	ldw	r3,8(r2)
    1800:	e0bffc17 	ldw	r2,-16(fp)
    1804:	10800317 	ldw	r2,12(r2)
    1808:	18bfe51e 	bne	r3,r2,17a0 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    180c:	e0bff517 	ldw	r2,-44(fp)
    1810:	1000251e 	bne	r2,zero,18a8 <altera_avalon_uart_read+0x148>
    1814:	e0bffc17 	ldw	r2,-16(fp)
    1818:	10c00217 	ldw	r3,8(r2)
    181c:	e0bffc17 	ldw	r2,-16(fp)
    1820:	10800317 	ldw	r2,12(r2)
    1824:	1880201e 	bne	r3,r2,18a8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
    1828:	e0bff617 	ldw	r2,-40(fp)
    182c:	1000071e 	bne	r2,zero,184c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    1830:	00017100 	call	1710 <alt_get_errno>
    1834:	1007883a 	mov	r3,r2
    1838:	008002c4 	movi	r2,11
    183c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
    1840:	00800044 	movi	r2,1
    1844:	e0bff405 	stb	r2,-48(fp)
        break;
    1848:	00001b06 	br	18b8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    184c:	0005303a 	rdctl	r2,status
    1850:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1854:	e0fff817 	ldw	r3,-32(fp)
    1858:	00bfff84 	movi	r2,-2
    185c:	1884703a 	and	r2,r3,r2
    1860:	1001703a 	wrctl	status,r2
  
  return context;
    1864:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    1868:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    186c:	e0bffc17 	ldw	r2,-16(fp)
    1870:	10800117 	ldw	r2,4(r2)
    1874:	10c02014 	ori	r3,r2,128
    1878:	e0bffc17 	ldw	r2,-16(fp)
    187c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1880:	e0bffc17 	ldw	r2,-16(fp)
    1884:	10800017 	ldw	r2,0(r2)
    1888:	10800304 	addi	r2,r2,12
    188c:	e0fffc17 	ldw	r3,-16(fp)
    1890:	18c00117 	ldw	r3,4(r3)
    1894:	10c00035 	stwio	r3,0(r2)
    1898:	e0bff717 	ldw	r2,-36(fp)
    189c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    18a0:	e0bff917 	ldw	r2,-28(fp)
    18a4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    18a8:	e0bff517 	ldw	r2,-44(fp)
    18ac:	1000021e 	bne	r2,zero,18b8 <altera_avalon_uart_read+0x158>
    18b0:	e0bffe17 	ldw	r2,-8(fp)
    18b4:	103fb91e 	bne	r2,zero,179c <altera_avalon_uart_read+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    18b8:	0005303a 	rdctl	r2,status
    18bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18c0:	e0fffa17 	ldw	r3,-24(fp)
    18c4:	00bfff84 	movi	r2,-2
    18c8:	1884703a 	and	r2,r3,r2
    18cc:	1001703a 	wrctl	status,r2
  
  return context;
    18d0:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    18d4:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    18d8:	e0bffc17 	ldw	r2,-16(fp)
    18dc:	10800117 	ldw	r2,4(r2)
    18e0:	10c02014 	ori	r3,r2,128
    18e4:	e0bffc17 	ldw	r2,-16(fp)
    18e8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    18ec:	e0bffc17 	ldw	r2,-16(fp)
    18f0:	10800017 	ldw	r2,0(r2)
    18f4:	10800304 	addi	r2,r2,12
    18f8:	e0fffc17 	ldw	r3,-16(fp)
    18fc:	18c00117 	ldw	r3,4(r3)
    1900:	10c00035 	stwio	r3,0(r2)
    1904:	e0bff717 	ldw	r2,-36(fp)
    1908:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    190c:	e0bffb17 	ldw	r2,-20(fp)
    1910:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    1914:	e0bff403 	ldbu	r2,-48(fp)
    1918:	10000226 	beq	r2,zero,1924 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
    191c:	00bffd44 	movi	r2,-11
    1920:	00000106 	br	1928 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
    1924:	e0bff517 	ldw	r2,-44(fp)
  }
}
    1928:	e037883a 	mov	sp,fp
    192c:	dfc00117 	ldw	ra,4(sp)
    1930:	df000017 	ldw	fp,0(sp)
    1934:	dec00204 	addi	sp,sp,8
    1938:	f800283a 	ret

0000193c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    193c:	defffe04 	addi	sp,sp,-8
    1940:	dfc00115 	stw	ra,4(sp)
    1944:	df000015 	stw	fp,0(sp)
    1948:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    194c:	00800034 	movhi	r2,0
    1950:	10919304 	addi	r2,r2,17996
    1954:	10800017 	ldw	r2,0(r2)
    1958:	10000526 	beq	r2,zero,1970 <alt_get_errno+0x34>
    195c:	00800034 	movhi	r2,0
    1960:	10919304 	addi	r2,r2,17996
    1964:	10800017 	ldw	r2,0(r2)
    1968:	103ee83a 	callr	r2
    196c:	00000206 	br	1978 <alt_get_errno+0x3c>
    1970:	00800034 	movhi	r2,0
    1974:	10968d04 	addi	r2,r2,23092
}
    1978:	e037883a 	mov	sp,fp
    197c:	dfc00117 	ldw	ra,4(sp)
    1980:	df000017 	ldw	fp,0(sp)
    1984:	dec00204 	addi	sp,sp,8
    1988:	f800283a 	ret

0000198c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    198c:	defff204 	addi	sp,sp,-56
    1990:	dfc00d15 	stw	ra,52(sp)
    1994:	df000c15 	stw	fp,48(sp)
    1998:	df000c04 	addi	fp,sp,48
    199c:	e13ffc15 	stw	r4,-16(fp)
    19a0:	e17ffd15 	stw	r5,-12(fp)
    19a4:	e1bffe15 	stw	r6,-8(fp)
    19a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    19ac:	e0bffe17 	ldw	r2,-8(fp)
    19b0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    19b4:	e0bfff17 	ldw	r2,-4(fp)
    19b8:	1090000c 	andi	r2,r2,16384
    19bc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    19c0:	00003c06 	br	1ab4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    19c4:	e0bffc17 	ldw	r2,-16(fp)
    19c8:	10800517 	ldw	r2,20(r2)
    19cc:	10800044 	addi	r2,r2,1
    19d0:	10800fcc 	andi	r2,r2,63
    19d4:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    19d8:	e0bffc17 	ldw	r2,-16(fp)
    19dc:	10c00417 	ldw	r3,16(r2)
    19e0:	e0bff617 	ldw	r2,-40(fp)
    19e4:	1880221e 	bne	r3,r2,1a70 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
    19e8:	e0bff517 	ldw	r2,-44(fp)
    19ec:	10000526 	beq	r2,zero,1a04 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    19f0:	000193c0 	call	193c <alt_get_errno>
    19f4:	1007883a 	mov	r3,r2
    19f8:	008002c4 	movi	r2,11
    19fc:	18800015 	stw	r2,0(r3)
        break;
    1a00:	00002e06 	br	1abc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a04:	0005303a 	rdctl	r2,status
    1a08:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a0c:	e0fff817 	ldw	r3,-32(fp)
    1a10:	00bfff84 	movi	r2,-2
    1a14:	1884703a 	and	r2,r3,r2
    1a18:	1001703a 	wrctl	status,r2
  
  return context;
    1a1c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    1a20:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    1a24:	e0bffc17 	ldw	r2,-16(fp)
    1a28:	10800117 	ldw	r2,4(r2)
    1a2c:	10c11014 	ori	r3,r2,1088
    1a30:	e0bffc17 	ldw	r2,-16(fp)
    1a34:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1a38:	e0bffc17 	ldw	r2,-16(fp)
    1a3c:	10800017 	ldw	r2,0(r2)
    1a40:	10800304 	addi	r2,r2,12
    1a44:	e0fffc17 	ldw	r3,-16(fp)
    1a48:	18c00117 	ldw	r3,4(r3)
    1a4c:	10c00035 	stwio	r3,0(r2)
    1a50:	e0bff717 	ldw	r2,-36(fp)
    1a54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a58:	e0bff917 	ldw	r2,-28(fp)
    1a5c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    1a60:	e0bffc17 	ldw	r2,-16(fp)
    1a64:	10c00417 	ldw	r3,16(r2)
    1a68:	e0bff617 	ldw	r2,-40(fp)
    1a6c:	18bffc26 	beq	r3,r2,1a60 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
    1a70:	e0bff417 	ldw	r2,-48(fp)
    1a74:	10bfffc4 	addi	r2,r2,-1
    1a78:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    1a7c:	e0bffc17 	ldw	r2,-16(fp)
    1a80:	10c00517 	ldw	r3,20(r2)
    1a84:	e0bffd17 	ldw	r2,-12(fp)
    1a88:	11000044 	addi	r4,r2,1
    1a8c:	e13ffd15 	stw	r4,-12(fp)
    1a90:	10800003 	ldbu	r2,0(r2)
    1a94:	1009883a 	mov	r4,r2
    1a98:	e0bffc17 	ldw	r2,-16(fp)
    1a9c:	10c5883a 	add	r2,r2,r3
    1aa0:	10801704 	addi	r2,r2,92
    1aa4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
    1aa8:	e0bffc17 	ldw	r2,-16(fp)
    1aac:	e0fff617 	ldw	r3,-40(fp)
    1ab0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    1ab4:	e0bff417 	ldw	r2,-48(fp)
    1ab8:	103fc21e 	bne	r2,zero,19c4 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1abc:	0005303a 	rdctl	r2,status
    1ac0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1ac4:	e0fffa17 	ldw	r3,-24(fp)
    1ac8:	00bfff84 	movi	r2,-2
    1acc:	1884703a 	and	r2,r3,r2
    1ad0:	1001703a 	wrctl	status,r2
  
  return context;
    1ad4:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    1ad8:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    1adc:	e0bffc17 	ldw	r2,-16(fp)
    1ae0:	10800117 	ldw	r2,4(r2)
    1ae4:	10c11014 	ori	r3,r2,1088
    1ae8:	e0bffc17 	ldw	r2,-16(fp)
    1aec:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1af0:	e0bffc17 	ldw	r2,-16(fp)
    1af4:	10800017 	ldw	r2,0(r2)
    1af8:	10800304 	addi	r2,r2,12
    1afc:	e0fffc17 	ldw	r3,-16(fp)
    1b00:	18c00117 	ldw	r3,4(r3)
    1b04:	10c00035 	stwio	r3,0(r2)
    1b08:	e0bff717 	ldw	r2,-36(fp)
    1b0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1b10:	e0bffb17 	ldw	r2,-20(fp)
    1b14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    1b18:	e0fffe17 	ldw	r3,-8(fp)
    1b1c:	e0bff417 	ldw	r2,-48(fp)
    1b20:	1885c83a 	sub	r2,r3,r2
}
    1b24:	e037883a 	mov	sp,fp
    1b28:	dfc00117 	ldw	ra,4(sp)
    1b2c:	df000017 	ldw	fp,0(sp)
    1b30:	dec00204 	addi	sp,sp,8
    1b34:	f800283a 	ret

00001b38 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1b38:	defff504 	addi	sp,sp,-44
    1b3c:	df000a15 	stw	fp,40(sp)
    1b40:	df000a04 	addi	fp,sp,40
    1b44:	e13ffc15 	stw	r4,-16(fp)
    1b48:	e17ffd15 	stw	r5,-12(fp)
    1b4c:	e1bffe15 	stw	r6,-8(fp)
    1b50:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    1b54:	e03ff615 	stw	zero,-40(fp)
    1b58:	00800034 	movhi	r2,0
    1b5c:	10969204 	addi	r2,r2,23112
    1b60:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    1b64:	10003f26 	beq	r2,zero,1c64 <alt_alarm_start+0x12c>
  {
    if (alarm)
    1b68:	e0bffc17 	ldw	r2,-16(fp)
    1b6c:	10003b26 	beq	r2,zero,1c5c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    1b70:	e0bffc17 	ldw	r2,-16(fp)
    1b74:	e0fffe17 	ldw	r3,-8(fp)
    1b78:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    1b7c:	e0bffc17 	ldw	r2,-16(fp)
    1b80:	e0ffff17 	ldw	r3,-4(fp)
    1b84:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1b88:	0005303a 	rdctl	r2,status
    1b8c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1b90:	e0fff817 	ldw	r3,-32(fp)
    1b94:	00bfff84 	movi	r2,-2
    1b98:	1884703a 	and	r2,r3,r2
    1b9c:	1001703a 	wrctl	status,r2
  
  return context;
    1ba0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    1ba4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1ba8:	00800034 	movhi	r2,0
    1bac:	10969304 	addi	r2,r2,23116
    1bb0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    1bb4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1bb8:	e0fffd17 	ldw	r3,-12(fp)
    1bbc:	e0bff617 	ldw	r2,-40(fp)
    1bc0:	1885883a 	add	r2,r3,r2
    1bc4:	10c00044 	addi	r3,r2,1
    1bc8:	e0bffc17 	ldw	r2,-16(fp)
    1bcc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1bd0:	e0bffc17 	ldw	r2,-16(fp)
    1bd4:	10c00217 	ldw	r3,8(r2)
    1bd8:	e0bff617 	ldw	r2,-40(fp)
    1bdc:	1880042e 	bgeu	r3,r2,1bf0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    1be0:	e0bffc17 	ldw	r2,-16(fp)
    1be4:	00c00044 	movi	r3,1
    1be8:	10c00405 	stb	r3,16(r2)
    1bec:	00000206 	br	1bf8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    1bf0:	e0bffc17 	ldw	r2,-16(fp)
    1bf4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1bf8:	e0fffc17 	ldw	r3,-16(fp)
    1bfc:	00800034 	movhi	r2,0
    1c00:	10919504 	addi	r2,r2,18004
    1c04:	e0bff915 	stw	r2,-28(fp)
    1c08:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1c0c:	e0bffa17 	ldw	r2,-24(fp)
    1c10:	e0fff917 	ldw	r3,-28(fp)
    1c14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1c18:	e0bff917 	ldw	r2,-28(fp)
    1c1c:	10c00017 	ldw	r3,0(r2)
    1c20:	e0bffa17 	ldw	r2,-24(fp)
    1c24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1c28:	e0bff917 	ldw	r2,-28(fp)
    1c2c:	10800017 	ldw	r2,0(r2)
    1c30:	e0fffa17 	ldw	r3,-24(fp)
    1c34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1c38:	e0bff917 	ldw	r2,-28(fp)
    1c3c:	e0fffa17 	ldw	r3,-24(fp)
    1c40:	10c00015 	stw	r3,0(r2)
    1c44:	e0bff717 	ldw	r2,-36(fp)
    1c48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c4c:	e0bffb17 	ldw	r2,-20(fp)
    1c50:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    1c54:	0005883a 	mov	r2,zero
    1c58:	00000306 	br	1c68 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    1c5c:	00bffa84 	movi	r2,-22
    1c60:	00000106 	br	1c68 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    1c64:	00bfde84 	movi	r2,-134
  }
}
    1c68:	e037883a 	mov	sp,fp
    1c6c:	df000017 	ldw	fp,0(sp)
    1c70:	dec00104 	addi	sp,sp,4
    1c74:	f800283a 	ret

00001c78 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1c78:	defffa04 	addi	sp,sp,-24
    1c7c:	dfc00515 	stw	ra,20(sp)
    1c80:	df000415 	stw	fp,16(sp)
    1c84:	df000404 	addi	fp,sp,16
    1c88:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    1c8c:	00800244 	movi	r2,9
    1c90:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    1c94:	e13ffd17 	ldw	r4,-12(fp)
    1c98:	014003f4 	movhi	r5,15
    1c9c:	29509004 	addi	r5,r5,16960
    1ca0:	00031c80 	call	31c8 <__mulsi3>
    1ca4:	0100bef4 	movhi	r4,763
    1ca8:	213c2004 	addi	r4,r4,-3968
    1cac:	100b883a 	mov	r5,r2
    1cb0:	00031b80 	call	31b8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1cb4:	01200034 	movhi	r4,32768
    1cb8:	213fffc4 	addi	r4,r4,-1
    1cbc:	100b883a 	mov	r5,r2
    1cc0:	00031b80 	call	31b8 <__udivsi3>
    1cc4:	e13fff17 	ldw	r4,-4(fp)
    1cc8:	100b883a 	mov	r5,r2
    1ccc:	00031b80 	call	31b8 <__udivsi3>
    1cd0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1cd4:	e0bffe17 	ldw	r2,-8(fp)
    1cd8:	10002a26 	beq	r2,zero,1d84 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    1cdc:	e03ffc15 	stw	zero,-16(fp)
    1ce0:	00001706 	br	1d40 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1ce4:	00a00034 	movhi	r2,32768
    1ce8:	10bfffc4 	addi	r2,r2,-1
    1cec:	10bfffc4 	addi	r2,r2,-1
    1cf0:	103ffe1e 	bne	r2,zero,1cec <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    1cf4:	e13ffd17 	ldw	r4,-12(fp)
    1cf8:	014003f4 	movhi	r5,15
    1cfc:	29509004 	addi	r5,r5,16960
    1d00:	00031c80 	call	31c8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1d04:	0100bef4 	movhi	r4,763
    1d08:	213c2004 	addi	r4,r4,-3968
    1d0c:	100b883a 	mov	r5,r2
    1d10:	00031b80 	call	31b8 <__udivsi3>
    1d14:	01200034 	movhi	r4,32768
    1d18:	213fffc4 	addi	r4,r4,-1
    1d1c:	100b883a 	mov	r5,r2
    1d20:	00031b80 	call	31b8 <__udivsi3>
    1d24:	1007883a 	mov	r3,r2
    1d28:	e0bfff17 	ldw	r2,-4(fp)
    1d2c:	10c5c83a 	sub	r2,r2,r3
    1d30:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	10800044 	addi	r2,r2,1
    1d3c:	e0bffc15 	stw	r2,-16(fp)
    1d40:	e0fffc17 	ldw	r3,-16(fp)
    1d44:	e0bffe17 	ldw	r2,-8(fp)
    1d48:	18bfe616 	blt	r3,r2,1ce4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1d4c:	e13ffd17 	ldw	r4,-12(fp)
    1d50:	014003f4 	movhi	r5,15
    1d54:	29509004 	addi	r5,r5,16960
    1d58:	00031c80 	call	31c8 <__mulsi3>
    1d5c:	0100bef4 	movhi	r4,763
    1d60:	213c2004 	addi	r4,r4,-3968
    1d64:	100b883a 	mov	r5,r2
    1d68:	00031b80 	call	31b8 <__udivsi3>
    1d6c:	1009883a 	mov	r4,r2
    1d70:	e17fff17 	ldw	r5,-4(fp)
    1d74:	00031c80 	call	31c8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1d78:	10bfffc4 	addi	r2,r2,-1
    1d7c:	103ffe1e 	bne	r2,zero,1d78 <alt_busy_sleep+0x100>
    1d80:	00000d06 	br	1db8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1d84:	e13ffd17 	ldw	r4,-12(fp)
    1d88:	014003f4 	movhi	r5,15
    1d8c:	29509004 	addi	r5,r5,16960
    1d90:	00031c80 	call	31c8 <__mulsi3>
    1d94:	0100bef4 	movhi	r4,763
    1d98:	213c2004 	addi	r4,r4,-3968
    1d9c:	100b883a 	mov	r5,r2
    1da0:	00031b80 	call	31b8 <__udivsi3>
    1da4:	1009883a 	mov	r4,r2
    1da8:	e17fff17 	ldw	r5,-4(fp)
    1dac:	00031c80 	call	31c8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1db0:	10bfffc4 	addi	r2,r2,-1
    1db4:	00bffe16 	blt	zero,r2,1db0 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    1db8:	0005883a 	mov	r2,zero
}
    1dbc:	e037883a 	mov	sp,fp
    1dc0:	dfc00117 	ldw	ra,4(sp)
    1dc4:	df000017 	ldw	fp,0(sp)
    1dc8:	dec00204 	addi	sp,sp,8
    1dcc:	f800283a 	ret

00001dd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1dd0:	defffe04 	addi	sp,sp,-8
    1dd4:	dfc00115 	stw	ra,4(sp)
    1dd8:	df000015 	stw	fp,0(sp)
    1ddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1de0:	00800034 	movhi	r2,0
    1de4:	10919304 	addi	r2,r2,17996
    1de8:	10800017 	ldw	r2,0(r2)
    1dec:	10000526 	beq	r2,zero,1e04 <alt_get_errno+0x34>
    1df0:	00800034 	movhi	r2,0
    1df4:	10919304 	addi	r2,r2,17996
    1df8:	10800017 	ldw	r2,0(r2)
    1dfc:	103ee83a 	callr	r2
    1e00:	00000206 	br	1e0c <alt_get_errno+0x3c>
    1e04:	00800034 	movhi	r2,0
    1e08:	10968d04 	addi	r2,r2,23092
}
    1e0c:	e037883a 	mov	sp,fp
    1e10:	dfc00117 	ldw	ra,4(sp)
    1e14:	df000017 	ldw	fp,0(sp)
    1e18:	dec00204 	addi	sp,sp,8
    1e1c:	f800283a 	ret

00001e20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1e20:	defffb04 	addi	sp,sp,-20
    1e24:	dfc00415 	stw	ra,16(sp)
    1e28:	df000315 	stw	fp,12(sp)
    1e2c:	df000304 	addi	fp,sp,12
    1e30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1e34:	e0bfff17 	ldw	r2,-4(fp)
    1e38:	10000816 	blt	r2,zero,1e5c <close+0x3c>
    1e3c:	e13fff17 	ldw	r4,-4(fp)
    1e40:	01400304 	movi	r5,12
    1e44:	00031c80 	call	31c8 <__mulsi3>
    1e48:	1007883a 	mov	r3,r2
    1e4c:	00800034 	movhi	r2,0
    1e50:	10912c04 	addi	r2,r2,17584
    1e54:	1885883a 	add	r2,r3,r2
    1e58:	00000106 	br	1e60 <close+0x40>
    1e5c:	0005883a 	mov	r2,zero
    1e60:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1e64:	e0bffd17 	ldw	r2,-12(fp)
    1e68:	10001926 	beq	r2,zero,1ed0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1e6c:	e0bffd17 	ldw	r2,-12(fp)
    1e70:	10800017 	ldw	r2,0(r2)
    1e74:	10800417 	ldw	r2,16(r2)
    1e78:	10000626 	beq	r2,zero,1e94 <close+0x74>
    1e7c:	e0bffd17 	ldw	r2,-12(fp)
    1e80:	10800017 	ldw	r2,0(r2)
    1e84:	10800417 	ldw	r2,16(r2)
    1e88:	e13ffd17 	ldw	r4,-12(fp)
    1e8c:	103ee83a 	callr	r2
    1e90:	00000106 	br	1e98 <close+0x78>
    1e94:	0005883a 	mov	r2,zero
    1e98:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1e9c:	e13fff17 	ldw	r4,-4(fp)
    1ea0:	00027d40 	call	27d4 <alt_release_fd>
    if (rval < 0)
    1ea4:	e0bffe17 	ldw	r2,-8(fp)
    1ea8:	1000070e 	bge	r2,zero,1ec8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    1eac:	0001dd00 	call	1dd0 <alt_get_errno>
    1eb0:	1007883a 	mov	r3,r2
    1eb4:	e0bffe17 	ldw	r2,-8(fp)
    1eb8:	0085c83a 	sub	r2,zero,r2
    1ebc:	18800015 	stw	r2,0(r3)
      return -1;
    1ec0:	00bfffc4 	movi	r2,-1
    1ec4:	00000706 	br	1ee4 <close+0xc4>
    }
    return 0;
    1ec8:	0005883a 	mov	r2,zero
    1ecc:	00000506 	br	1ee4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1ed0:	0001dd00 	call	1dd0 <alt_get_errno>
    1ed4:	1007883a 	mov	r3,r2
    1ed8:	00801444 	movi	r2,81
    1edc:	18800015 	stw	r2,0(r3)
    return -1;
    1ee0:	00bfffc4 	movi	r2,-1
  }
}
    1ee4:	e037883a 	mov	sp,fp
    1ee8:	dfc00117 	ldw	ra,4(sp)
    1eec:	df000017 	ldw	fp,0(sp)
    1ef0:	dec00204 	addi	sp,sp,8
    1ef4:	f800283a 	ret

00001ef8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1ef8:	deffff04 	addi	sp,sp,-4
    1efc:	df000015 	stw	fp,0(sp)
    1f00:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1f04:	e037883a 	mov	sp,fp
    1f08:	df000017 	ldw	fp,0(sp)
    1f0c:	dec00104 	addi	sp,sp,4
    1f10:	f800283a 	ret

00001f14 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1f14:	defffc04 	addi	sp,sp,-16
    1f18:	df000315 	stw	fp,12(sp)
    1f1c:	df000304 	addi	fp,sp,12
    1f20:	e13ffd15 	stw	r4,-12(fp)
    1f24:	e17ffe15 	stw	r5,-8(fp)
    1f28:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1f2c:	e0bfff17 	ldw	r2,-4(fp)
}
    1f30:	e037883a 	mov	sp,fp
    1f34:	df000017 	ldw	fp,0(sp)
    1f38:	dec00104 	addi	sp,sp,4
    1f3c:	f800283a 	ret

00001f40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1f40:	defffe04 	addi	sp,sp,-8
    1f44:	dfc00115 	stw	ra,4(sp)
    1f48:	df000015 	stw	fp,0(sp)
    1f4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1f50:	00800034 	movhi	r2,0
    1f54:	10919304 	addi	r2,r2,17996
    1f58:	10800017 	ldw	r2,0(r2)
    1f5c:	10000526 	beq	r2,zero,1f74 <alt_get_errno+0x34>
    1f60:	00800034 	movhi	r2,0
    1f64:	10919304 	addi	r2,r2,17996
    1f68:	10800017 	ldw	r2,0(r2)
    1f6c:	103ee83a 	callr	r2
    1f70:	00000206 	br	1f7c <alt_get_errno+0x3c>
    1f74:	00800034 	movhi	r2,0
    1f78:	10968d04 	addi	r2,r2,23092
}
    1f7c:	e037883a 	mov	sp,fp
    1f80:	dfc00117 	ldw	ra,4(sp)
    1f84:	df000017 	ldw	fp,0(sp)
    1f88:	dec00204 	addi	sp,sp,8
    1f8c:	f800283a 	ret

00001f90 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1f90:	defffa04 	addi	sp,sp,-24
    1f94:	dfc00515 	stw	ra,20(sp)
    1f98:	df000415 	stw	fp,16(sp)
    1f9c:	df000404 	addi	fp,sp,16
    1fa0:	e13ffe15 	stw	r4,-8(fp)
    1fa4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1fa8:	e0bffe17 	ldw	r2,-8(fp)
    1fac:	10000326 	beq	r2,zero,1fbc <alt_dev_llist_insert+0x2c>
    1fb0:	e0bffe17 	ldw	r2,-8(fp)
    1fb4:	10800217 	ldw	r2,8(r2)
    1fb8:	1000061e 	bne	r2,zero,1fd4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    1fbc:	0001f400 	call	1f40 <alt_get_errno>
    1fc0:	1007883a 	mov	r3,r2
    1fc4:	00800584 	movi	r2,22
    1fc8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1fcc:	00bffa84 	movi	r2,-22
    1fd0:	00001306 	br	2020 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1fd4:	e0bffe17 	ldw	r2,-8(fp)
    1fd8:	e0ffff17 	ldw	r3,-4(fp)
    1fdc:	e0fffc15 	stw	r3,-16(fp)
    1fe0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1fe4:	e0bffd17 	ldw	r2,-12(fp)
    1fe8:	e0fffc17 	ldw	r3,-16(fp)
    1fec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1ff0:	e0bffc17 	ldw	r2,-16(fp)
    1ff4:	10c00017 	ldw	r3,0(r2)
    1ff8:	e0bffd17 	ldw	r2,-12(fp)
    1ffc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2000:	e0bffc17 	ldw	r2,-16(fp)
    2004:	10800017 	ldw	r2,0(r2)
    2008:	e0fffd17 	ldw	r3,-12(fp)
    200c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    2010:	e0bffc17 	ldw	r2,-16(fp)
    2014:	e0fffd17 	ldw	r3,-12(fp)
    2018:	10c00015 	stw	r3,0(r2)

  return 0;  
    201c:	0005883a 	mov	r2,zero
}
    2020:	e037883a 	mov	sp,fp
    2024:	dfc00117 	ldw	ra,4(sp)
    2028:	df000017 	ldw	fp,0(sp)
    202c:	dec00204 	addi	sp,sp,8
    2030:	f800283a 	ret

00002034 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2034:	defffd04 	addi	sp,sp,-12
    2038:	dfc00215 	stw	ra,8(sp)
    203c:	df000115 	stw	fp,4(sp)
    2040:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2044:	00800034 	movhi	r2,0
    2048:	108c8804 	addi	r2,r2,12832
    204c:	e0bfff15 	stw	r2,-4(fp)
    2050:	00000606 	br	206c <_do_ctors+0x38>
        (*ctor) (); 
    2054:	e0bfff17 	ldw	r2,-4(fp)
    2058:	10800017 	ldw	r2,0(r2)
    205c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2060:	e0bfff17 	ldw	r2,-4(fp)
    2064:	10bfff04 	addi	r2,r2,-4
    2068:	e0bfff15 	stw	r2,-4(fp)
    206c:	e0ffff17 	ldw	r3,-4(fp)
    2070:	00800034 	movhi	r2,0
    2074:	108c8904 	addi	r2,r2,12836
    2078:	18bff62e 	bgeu	r3,r2,2054 <_do_ctors+0x20>
        (*ctor) (); 
}
    207c:	e037883a 	mov	sp,fp
    2080:	dfc00117 	ldw	ra,4(sp)
    2084:	df000017 	ldw	fp,0(sp)
    2088:	dec00204 	addi	sp,sp,8
    208c:	f800283a 	ret

00002090 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2090:	defffd04 	addi	sp,sp,-12
    2094:	dfc00215 	stw	ra,8(sp)
    2098:	df000115 	stw	fp,4(sp)
    209c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    20a0:	00800034 	movhi	r2,0
    20a4:	108c8804 	addi	r2,r2,12832
    20a8:	e0bfff15 	stw	r2,-4(fp)
    20ac:	00000606 	br	20c8 <_do_dtors+0x38>
        (*dtor) (); 
    20b0:	e0bfff17 	ldw	r2,-4(fp)
    20b4:	10800017 	ldw	r2,0(r2)
    20b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    20bc:	e0bfff17 	ldw	r2,-4(fp)
    20c0:	10bfff04 	addi	r2,r2,-4
    20c4:	e0bfff15 	stw	r2,-4(fp)
    20c8:	e0ffff17 	ldw	r3,-4(fp)
    20cc:	00800034 	movhi	r2,0
    20d0:	108c8904 	addi	r2,r2,12836
    20d4:	18bff62e 	bgeu	r3,r2,20b0 <_do_dtors+0x20>
        (*dtor) (); 
}
    20d8:	e037883a 	mov	sp,fp
    20dc:	dfc00117 	ldw	ra,4(sp)
    20e0:	df000017 	ldw	fp,0(sp)
    20e4:	dec00204 	addi	sp,sp,8
    20e8:	f800283a 	ret

000020ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    20ec:	deffff04 	addi	sp,sp,-4
    20f0:	df000015 	stw	fp,0(sp)
    20f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    20f8:	e037883a 	mov	sp,fp
    20fc:	df000017 	ldw	fp,0(sp)
    2100:	dec00104 	addi	sp,sp,4
    2104:	f800283a 	ret

00002108 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2108:	defff904 	addi	sp,sp,-28
    210c:	dfc00615 	stw	ra,24(sp)
    2110:	df000515 	stw	fp,20(sp)
    2114:	df000504 	addi	fp,sp,20
    2118:	e13ffc15 	stw	r4,-16(fp)
    211c:	e17ffd15 	stw	r5,-12(fp)
    2120:	e1bffe15 	stw	r6,-8(fp)
    2124:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2128:	e0800217 	ldw	r2,8(fp)
    212c:	d8800015 	stw	r2,0(sp)
    2130:	e13ffc17 	ldw	r4,-16(fp)
    2134:	e17ffd17 	ldw	r5,-12(fp)
    2138:	e1bffe17 	ldw	r6,-8(fp)
    213c:	e1ffff17 	ldw	r7,-4(fp)
    2140:	00022e80 	call	22e8 <alt_iic_isr_register>
}  
    2144:	e037883a 	mov	sp,fp
    2148:	dfc00117 	ldw	ra,4(sp)
    214c:	df000017 	ldw	fp,0(sp)
    2150:	dec00204 	addi	sp,sp,8
    2154:	f800283a 	ret

00002158 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    2158:	defff904 	addi	sp,sp,-28
    215c:	df000615 	stw	fp,24(sp)
    2160:	df000604 	addi	fp,sp,24
    2164:	e13ffe15 	stw	r4,-8(fp)
    2168:	e17fff15 	stw	r5,-4(fp)
    216c:	e0bfff17 	ldw	r2,-4(fp)
    2170:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2174:	0005303a 	rdctl	r2,status
    2178:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    217c:	e0fffb17 	ldw	r3,-20(fp)
    2180:	00bfff84 	movi	r2,-2
    2184:	1884703a 	and	r2,r3,r2
    2188:	1001703a 	wrctl	status,r2
  
  return context;
    218c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2190:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    2194:	e0bffa17 	ldw	r2,-24(fp)
    2198:	00c00044 	movi	r3,1
    219c:	1884983a 	sll	r2,r3,r2
    21a0:	1007883a 	mov	r3,r2
    21a4:	00800034 	movhi	r2,0
    21a8:	10969104 	addi	r2,r2,23108
    21ac:	10800017 	ldw	r2,0(r2)
    21b0:	1886b03a 	or	r3,r3,r2
    21b4:	00800034 	movhi	r2,0
    21b8:	10969104 	addi	r2,r2,23108
    21bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    21c0:	00800034 	movhi	r2,0
    21c4:	10969104 	addi	r2,r2,23108
    21c8:	10800017 	ldw	r2,0(r2)
    21cc:	100170fa 	wrctl	ienable,r2
    21d0:	e0bffc17 	ldw	r2,-16(fp)
    21d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    21d8:	e0bffd17 	ldw	r2,-12(fp)
    21dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    21e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    21e4:	0001883a 	nop
}
    21e8:	e037883a 	mov	sp,fp
    21ec:	df000017 	ldw	fp,0(sp)
    21f0:	dec00104 	addi	sp,sp,4
    21f4:	f800283a 	ret

000021f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    21f8:	defff904 	addi	sp,sp,-28
    21fc:	df000615 	stw	fp,24(sp)
    2200:	df000604 	addi	fp,sp,24
    2204:	e13ffe15 	stw	r4,-8(fp)
    2208:	e17fff15 	stw	r5,-4(fp)
    220c:	e0bfff17 	ldw	r2,-4(fp)
    2210:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2214:	0005303a 	rdctl	r2,status
    2218:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    221c:	e0fffb17 	ldw	r3,-20(fp)
    2220:	00bfff84 	movi	r2,-2
    2224:	1884703a 	and	r2,r3,r2
    2228:	1001703a 	wrctl	status,r2
  
  return context;
    222c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2230:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    2234:	e0bffa17 	ldw	r2,-24(fp)
    2238:	00c00044 	movi	r3,1
    223c:	1884983a 	sll	r2,r3,r2
    2240:	0084303a 	nor	r2,zero,r2
    2244:	1007883a 	mov	r3,r2
    2248:	00800034 	movhi	r2,0
    224c:	10969104 	addi	r2,r2,23108
    2250:	10800017 	ldw	r2,0(r2)
    2254:	1886703a 	and	r3,r3,r2
    2258:	00800034 	movhi	r2,0
    225c:	10969104 	addi	r2,r2,23108
    2260:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2264:	00800034 	movhi	r2,0
    2268:	10969104 	addi	r2,r2,23108
    226c:	10800017 	ldw	r2,0(r2)
    2270:	100170fa 	wrctl	ienable,r2
    2274:	e0bffc17 	ldw	r2,-16(fp)
    2278:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    227c:	e0bffd17 	ldw	r2,-12(fp)
    2280:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2284:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    2288:	0001883a 	nop
}
    228c:	e037883a 	mov	sp,fp
    2290:	df000017 	ldw	fp,0(sp)
    2294:	dec00104 	addi	sp,sp,4
    2298:	f800283a 	ret

0000229c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    229c:	defffc04 	addi	sp,sp,-16
    22a0:	df000315 	stw	fp,12(sp)
    22a4:	df000304 	addi	fp,sp,12
    22a8:	e13ffe15 	stw	r4,-8(fp)
    22ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    22b0:	000530fa 	rdctl	r2,ienable
    22b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    22b8:	e0bfff17 	ldw	r2,-4(fp)
    22bc:	00c00044 	movi	r3,1
    22c0:	1884983a 	sll	r2,r3,r2
    22c4:	1007883a 	mov	r3,r2
    22c8:	e0bffd17 	ldw	r2,-12(fp)
    22cc:	1884703a 	and	r2,r3,r2
    22d0:	1004c03a 	cmpne	r2,r2,zero
    22d4:	10803fcc 	andi	r2,r2,255
}
    22d8:	e037883a 	mov	sp,fp
    22dc:	df000017 	ldw	fp,0(sp)
    22e0:	dec00104 	addi	sp,sp,4
    22e4:	f800283a 	ret

000022e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    22e8:	defff504 	addi	sp,sp,-44
    22ec:	dfc00a15 	stw	ra,40(sp)
    22f0:	df000915 	stw	fp,36(sp)
    22f4:	df000904 	addi	fp,sp,36
    22f8:	e13ffc15 	stw	r4,-16(fp)
    22fc:	e17ffd15 	stw	r5,-12(fp)
    2300:	e1bffe15 	stw	r6,-8(fp)
    2304:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    2308:	00bffa84 	movi	r2,-22
    230c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    2310:	e0bffd17 	ldw	r2,-12(fp)
    2314:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2318:	e0bff817 	ldw	r2,-32(fp)
    231c:	10800808 	cmpgei	r2,r2,32
    2320:	1000271e 	bne	r2,zero,23c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2324:	0005303a 	rdctl	r2,status
    2328:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    232c:	e0fffa17 	ldw	r3,-24(fp)
    2330:	00bfff84 	movi	r2,-2
    2334:	1884703a 	and	r2,r3,r2
    2338:	1001703a 	wrctl	status,r2
  
  return context;
    233c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    2340:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    2344:	00800034 	movhi	r2,0
    2348:	10969504 	addi	r2,r2,23124
    234c:	e0fff817 	ldw	r3,-32(fp)
    2350:	180690fa 	slli	r3,r3,3
    2354:	10c5883a 	add	r2,r2,r3
    2358:	e0fffe17 	ldw	r3,-8(fp)
    235c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    2360:	00800034 	movhi	r2,0
    2364:	10969504 	addi	r2,r2,23124
    2368:	e0fff817 	ldw	r3,-32(fp)
    236c:	180690fa 	slli	r3,r3,3
    2370:	18c00104 	addi	r3,r3,4
    2374:	10c5883a 	add	r2,r2,r3
    2378:	e0ffff17 	ldw	r3,-4(fp)
    237c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2380:	e0bffe17 	ldw	r2,-8(fp)
    2384:	10000526 	beq	r2,zero,239c <alt_iic_isr_register+0xb4>
    2388:	e0bff817 	ldw	r2,-32(fp)
    238c:	e13ffc17 	ldw	r4,-16(fp)
    2390:	100b883a 	mov	r5,r2
    2394:	00021580 	call	2158 <alt_ic_irq_enable>
    2398:	00000406 	br	23ac <alt_iic_isr_register+0xc4>
    239c:	e0bff817 	ldw	r2,-32(fp)
    23a0:	e13ffc17 	ldw	r4,-16(fp)
    23a4:	100b883a 	mov	r5,r2
    23a8:	00021f80 	call	21f8 <alt_ic_irq_disable>
    23ac:	e0bff715 	stw	r2,-36(fp)
    23b0:	e0bff917 	ldw	r2,-28(fp)
    23b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    23b8:	e0bffb17 	ldw	r2,-20(fp)
    23bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    23c0:	e0bff717 	ldw	r2,-36(fp)
}
    23c4:	e037883a 	mov	sp,fp
    23c8:	dfc00117 	ldw	ra,4(sp)
    23cc:	df000017 	ldw	fp,0(sp)
    23d0:	dec00204 	addi	sp,sp,8
    23d4:	f800283a 	ret

000023d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    23d8:	defff804 	addi	sp,sp,-32
    23dc:	dfc00715 	stw	ra,28(sp)
    23e0:	df000615 	stw	fp,24(sp)
    23e4:	dc000515 	stw	r16,20(sp)
    23e8:	df000604 	addi	fp,sp,24
    23ec:	e13ffb15 	stw	r4,-20(fp)
    23f0:	e17ffc15 	stw	r5,-16(fp)
    23f4:	e1bffd15 	stw	r6,-12(fp)
    23f8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    23fc:	e13ffc17 	ldw	r4,-16(fp)
    2400:	e17ffd17 	ldw	r5,-12(fp)
    2404:	e1bffe17 	ldw	r6,-8(fp)
    2408:	00026740 	call	2674 <open>
    240c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    2410:	e0bffa17 	ldw	r2,-24(fp)
    2414:	10002216 	blt	r2,zero,24a0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    2418:	04000034 	movhi	r16,0
    241c:	84112c04 	addi	r16,r16,17584
    2420:	e0bffa17 	ldw	r2,-24(fp)
    2424:	1009883a 	mov	r4,r2
    2428:	01400304 	movi	r5,12
    242c:	00031c80 	call	31c8 <__mulsi3>
    2430:	8085883a 	add	r2,r16,r2
    2434:	10c00017 	ldw	r3,0(r2)
    2438:	e0bffb17 	ldw	r2,-20(fp)
    243c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    2440:	04000034 	movhi	r16,0
    2444:	84112c04 	addi	r16,r16,17584
    2448:	e0bffa17 	ldw	r2,-24(fp)
    244c:	1009883a 	mov	r4,r2
    2450:	01400304 	movi	r5,12
    2454:	00031c80 	call	31c8 <__mulsi3>
    2458:	10800104 	addi	r2,r2,4
    245c:	8085883a 	add	r2,r16,r2
    2460:	10c00017 	ldw	r3,0(r2)
    2464:	e0bffb17 	ldw	r2,-20(fp)
    2468:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    246c:	04000034 	movhi	r16,0
    2470:	84112c04 	addi	r16,r16,17584
    2474:	e0bffa17 	ldw	r2,-24(fp)
    2478:	1009883a 	mov	r4,r2
    247c:	01400304 	movi	r5,12
    2480:	00031c80 	call	31c8 <__mulsi3>
    2484:	10800204 	addi	r2,r2,8
    2488:	8085883a 	add	r2,r16,r2
    248c:	10c00017 	ldw	r3,0(r2)
    2490:	e0bffb17 	ldw	r2,-20(fp)
    2494:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2498:	e13ffa17 	ldw	r4,-24(fp)
    249c:	00027d40 	call	27d4 <alt_release_fd>
  }
} 
    24a0:	e6ffff04 	addi	sp,fp,-4
    24a4:	dfc00217 	ldw	ra,8(sp)
    24a8:	df000117 	ldw	fp,4(sp)
    24ac:	dc000017 	ldw	r16,0(sp)
    24b0:	dec00304 	addi	sp,sp,12
    24b4:	f800283a 	ret

000024b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    24b8:	defffb04 	addi	sp,sp,-20
    24bc:	dfc00415 	stw	ra,16(sp)
    24c0:	df000315 	stw	fp,12(sp)
    24c4:	df000304 	addi	fp,sp,12
    24c8:	e13ffd15 	stw	r4,-12(fp)
    24cc:	e17ffe15 	stw	r5,-8(fp)
    24d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    24d4:	01000034 	movhi	r4,0
    24d8:	21112f04 	addi	r4,r4,17596
    24dc:	e17ffd17 	ldw	r5,-12(fp)
    24e0:	01800044 	movi	r6,1
    24e4:	01c07fc4 	movi	r7,511
    24e8:	00023d80 	call	23d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    24ec:	01000034 	movhi	r4,0
    24f0:	21112c04 	addi	r4,r4,17584
    24f4:	e17ffe17 	ldw	r5,-8(fp)
    24f8:	000d883a 	mov	r6,zero
    24fc:	01c07fc4 	movi	r7,511
    2500:	00023d80 	call	23d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2504:	01000034 	movhi	r4,0
    2508:	21113204 	addi	r4,r4,17608
    250c:	e17fff17 	ldw	r5,-4(fp)
    2510:	01800044 	movi	r6,1
    2514:	01c07fc4 	movi	r7,511
    2518:	00023d80 	call	23d8 <alt_open_fd>
}  
    251c:	e037883a 	mov	sp,fp
    2520:	dfc00117 	ldw	ra,4(sp)
    2524:	df000017 	ldw	fp,0(sp)
    2528:	dec00204 	addi	sp,sp,8
    252c:	f800283a 	ret

00002530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2530:	defffe04 	addi	sp,sp,-8
    2534:	dfc00115 	stw	ra,4(sp)
    2538:	df000015 	stw	fp,0(sp)
    253c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2540:	00800034 	movhi	r2,0
    2544:	10919304 	addi	r2,r2,17996
    2548:	10800017 	ldw	r2,0(r2)
    254c:	10000526 	beq	r2,zero,2564 <alt_get_errno+0x34>
    2550:	00800034 	movhi	r2,0
    2554:	10919304 	addi	r2,r2,17996
    2558:	10800017 	ldw	r2,0(r2)
    255c:	103ee83a 	callr	r2
    2560:	00000206 	br	256c <alt_get_errno+0x3c>
    2564:	00800034 	movhi	r2,0
    2568:	10968d04 	addi	r2,r2,23092
}
    256c:	e037883a 	mov	sp,fp
    2570:	dfc00117 	ldw	ra,4(sp)
    2574:	df000017 	ldw	fp,0(sp)
    2578:	dec00204 	addi	sp,sp,8
    257c:	f800283a 	ret

00002580 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2580:	defffb04 	addi	sp,sp,-20
    2584:	dfc00415 	stw	ra,16(sp)
    2588:	df000315 	stw	fp,12(sp)
    258c:	dc000215 	stw	r16,8(sp)
    2590:	df000304 	addi	fp,sp,12
    2594:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2598:	e0bffe17 	ldw	r2,-8(fp)
    259c:	10800217 	ldw	r2,8(r2)
    25a0:	10d00034 	orhi	r3,r2,16384
    25a4:	e0bffe17 	ldw	r2,-8(fp)
    25a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    25ac:	e03ffd15 	stw	zero,-12(fp)
    25b0:	00002306 	br	2640 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    25b4:	04000034 	movhi	r16,0
    25b8:	84112c04 	addi	r16,r16,17584
    25bc:	e0bffd17 	ldw	r2,-12(fp)
    25c0:	1009883a 	mov	r4,r2
    25c4:	01400304 	movi	r5,12
    25c8:	00031c80 	call	31c8 <__mulsi3>
    25cc:	8085883a 	add	r2,r16,r2
    25d0:	10c00017 	ldw	r3,0(r2)
    25d4:	e0bffe17 	ldw	r2,-8(fp)
    25d8:	10800017 	ldw	r2,0(r2)
    25dc:	1880151e 	bne	r3,r2,2634 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    25e0:	04000034 	movhi	r16,0
    25e4:	84112c04 	addi	r16,r16,17584
    25e8:	e0bffd17 	ldw	r2,-12(fp)
    25ec:	1009883a 	mov	r4,r2
    25f0:	01400304 	movi	r5,12
    25f4:	00031c80 	call	31c8 <__mulsi3>
    25f8:	10800204 	addi	r2,r2,8
    25fc:	8085883a 	add	r2,r16,r2
    2600:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2604:	10000b0e 	bge	r2,zero,2634 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    2608:	e13ffd17 	ldw	r4,-12(fp)
    260c:	01400304 	movi	r5,12
    2610:	00031c80 	call	31c8 <__mulsi3>
    2614:	1007883a 	mov	r3,r2
    2618:	00800034 	movhi	r2,0
    261c:	10912c04 	addi	r2,r2,17584
    2620:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2624:	e0bffe17 	ldw	r2,-8(fp)
    2628:	18800226 	beq	r3,r2,2634 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    262c:	00bffcc4 	movi	r2,-13
    2630:	00000a06 	br	265c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2634:	e0bffd17 	ldw	r2,-12(fp)
    2638:	10800044 	addi	r2,r2,1
    263c:	e0bffd15 	stw	r2,-12(fp)
    2640:	00800034 	movhi	r2,0
    2644:	10919204 	addi	r2,r2,17992
    2648:	10800017 	ldw	r2,0(r2)
    264c:	1007883a 	mov	r3,r2
    2650:	e0bffd17 	ldw	r2,-12(fp)
    2654:	18bfd72e 	bgeu	r3,r2,25b4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2658:	0005883a 	mov	r2,zero
}
    265c:	e6ffff04 	addi	sp,fp,-4
    2660:	dfc00217 	ldw	ra,8(sp)
    2664:	df000117 	ldw	fp,4(sp)
    2668:	dc000017 	ldw	r16,0(sp)
    266c:	dec00304 	addi	sp,sp,12
    2670:	f800283a 	ret

00002674 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2674:	defff604 	addi	sp,sp,-40
    2678:	dfc00915 	stw	ra,36(sp)
    267c:	df000815 	stw	fp,32(sp)
    2680:	df000804 	addi	fp,sp,32
    2684:	e13ffd15 	stw	r4,-12(fp)
    2688:	e17ffe15 	stw	r5,-8(fp)
    268c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2690:	00bfffc4 	movi	r2,-1
    2694:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    2698:	00bffb44 	movi	r2,-19
    269c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    26a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    26a4:	e13ffd17 	ldw	r4,-12(fp)
    26a8:	01400034 	movhi	r5,0
    26ac:	29519004 	addi	r5,r5,17984
    26b0:	0002a100 	call	2a10 <alt_find_dev>
    26b4:	e0bff815 	stw	r2,-32(fp)
    26b8:	e0bff817 	ldw	r2,-32(fp)
    26bc:	1000051e 	bne	r2,zero,26d4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    26c0:	e13ffd17 	ldw	r4,-12(fp)
    26c4:	0002aa00 	call	2aa0 <alt_find_file>
    26c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    26cc:	00800044 	movi	r2,1
    26d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    26d4:	e0bff817 	ldw	r2,-32(fp)
    26d8:	10002b26 	beq	r2,zero,2788 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    26dc:	e13ff817 	ldw	r4,-32(fp)
    26e0:	0002bb40 	call	2bb4 <alt_get_fd>
    26e4:	e0bff915 	stw	r2,-28(fp)
    26e8:	e0bff917 	ldw	r2,-28(fp)
    26ec:	1000030e 	bge	r2,zero,26fc <open+0x88>
    {
      status = index;
    26f0:	e0bff917 	ldw	r2,-28(fp)
    26f4:	e0bffa15 	stw	r2,-24(fp)
    26f8:	00002506 	br	2790 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    26fc:	e13ff917 	ldw	r4,-28(fp)
    2700:	01400304 	movi	r5,12
    2704:	00031c80 	call	31c8 <__mulsi3>
    2708:	1007883a 	mov	r3,r2
    270c:	00800034 	movhi	r2,0
    2710:	10912c04 	addi	r2,r2,17584
    2714:	1885883a 	add	r2,r3,r2
    2718:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    271c:	e0fffe17 	ldw	r3,-8(fp)
    2720:	00900034 	movhi	r2,16384
    2724:	10bfffc4 	addi	r2,r2,-1
    2728:	1886703a 	and	r3,r3,r2
    272c:	e0bffc17 	ldw	r2,-16(fp)
    2730:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2734:	e0bffb17 	ldw	r2,-20(fp)
    2738:	1000051e 	bne	r2,zero,2750 <open+0xdc>
    273c:	e13ffc17 	ldw	r4,-16(fp)
    2740:	00025800 	call	2580 <alt_file_locked>
    2744:	e0bffa15 	stw	r2,-24(fp)
    2748:	e0bffa17 	ldw	r2,-24(fp)
    274c:	10001016 	blt	r2,zero,2790 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2750:	e0bff817 	ldw	r2,-32(fp)
    2754:	10800317 	ldw	r2,12(r2)
    2758:	10000826 	beq	r2,zero,277c <open+0x108>
    275c:	e0bff817 	ldw	r2,-32(fp)
    2760:	10800317 	ldw	r2,12(r2)
    2764:	e13ffc17 	ldw	r4,-16(fp)
    2768:	e17ffd17 	ldw	r5,-12(fp)
    276c:	e1bffe17 	ldw	r6,-8(fp)
    2770:	e1ffff17 	ldw	r7,-4(fp)
    2774:	103ee83a 	callr	r2
    2778:	00000106 	br	2780 <open+0x10c>
    277c:	0005883a 	mov	r2,zero
    2780:	e0bffa15 	stw	r2,-24(fp)
    2784:	00000206 	br	2790 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2788:	00bffb44 	movi	r2,-19
    278c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2790:	e0bffa17 	ldw	r2,-24(fp)
    2794:	1000090e 	bge	r2,zero,27bc <open+0x148>
  {
    alt_release_fd (index);  
    2798:	e13ff917 	ldw	r4,-28(fp)
    279c:	00027d40 	call	27d4 <alt_release_fd>
    ALT_ERRNO = -status;
    27a0:	00025300 	call	2530 <alt_get_errno>
    27a4:	1007883a 	mov	r3,r2
    27a8:	e0bffa17 	ldw	r2,-24(fp)
    27ac:	0085c83a 	sub	r2,zero,r2
    27b0:	18800015 	stw	r2,0(r3)
    return -1;
    27b4:	00bfffc4 	movi	r2,-1
    27b8:	00000106 	br	27c0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    27bc:	e0bff917 	ldw	r2,-28(fp)
}
    27c0:	e037883a 	mov	sp,fp
    27c4:	dfc00117 	ldw	ra,4(sp)
    27c8:	df000017 	ldw	fp,0(sp)
    27cc:	dec00204 	addi	sp,sp,8
    27d0:	f800283a 	ret

000027d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    27d4:	defffc04 	addi	sp,sp,-16
    27d8:	dfc00315 	stw	ra,12(sp)
    27dc:	df000215 	stw	fp,8(sp)
    27e0:	dc000115 	stw	r16,4(sp)
    27e4:	df000204 	addi	fp,sp,8
    27e8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    27ec:	e0bffe17 	ldw	r2,-8(fp)
    27f0:	108000d0 	cmplti	r2,r2,3
    27f4:	1000111e 	bne	r2,zero,283c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    27f8:	04000034 	movhi	r16,0
    27fc:	84112c04 	addi	r16,r16,17584
    2800:	e0bffe17 	ldw	r2,-8(fp)
    2804:	1009883a 	mov	r4,r2
    2808:	01400304 	movi	r5,12
    280c:	00031c80 	call	31c8 <__mulsi3>
    2810:	10800204 	addi	r2,r2,8
    2814:	8085883a 	add	r2,r16,r2
    2818:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    281c:	04000034 	movhi	r16,0
    2820:	84112c04 	addi	r16,r16,17584
    2824:	e0bffe17 	ldw	r2,-8(fp)
    2828:	1009883a 	mov	r4,r2
    282c:	01400304 	movi	r5,12
    2830:	00031c80 	call	31c8 <__mulsi3>
    2834:	8085883a 	add	r2,r16,r2
    2838:	10000015 	stw	zero,0(r2)
  }
}
    283c:	e6ffff04 	addi	sp,fp,-4
    2840:	dfc00217 	ldw	ra,8(sp)
    2844:	df000117 	ldw	fp,4(sp)
    2848:	dc000017 	ldw	r16,0(sp)
    284c:	dec00304 	addi	sp,sp,12
    2850:	f800283a 	ret

00002854 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2854:	defffa04 	addi	sp,sp,-24
    2858:	df000515 	stw	fp,20(sp)
    285c:	df000504 	addi	fp,sp,20
    2860:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2864:	0005303a 	rdctl	r2,status
    2868:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    286c:	e0fffc17 	ldw	r3,-16(fp)
    2870:	00bfff84 	movi	r2,-2
    2874:	1884703a 	and	r2,r3,r2
    2878:	1001703a 	wrctl	status,r2
  
  return context;
    287c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2880:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    2884:	e0bfff17 	ldw	r2,-4(fp)
    2888:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    288c:	e0bffd17 	ldw	r2,-12(fp)
    2890:	10800017 	ldw	r2,0(r2)
    2894:	e0fffd17 	ldw	r3,-12(fp)
    2898:	18c00117 	ldw	r3,4(r3)
    289c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    28a0:	e0bffd17 	ldw	r2,-12(fp)
    28a4:	10800117 	ldw	r2,4(r2)
    28a8:	e0fffd17 	ldw	r3,-12(fp)
    28ac:	18c00017 	ldw	r3,0(r3)
    28b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    28b4:	e0bffd17 	ldw	r2,-12(fp)
    28b8:	e0fffd17 	ldw	r3,-12(fp)
    28bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    28c0:	e0bffd17 	ldw	r2,-12(fp)
    28c4:	e0fffd17 	ldw	r3,-12(fp)
    28c8:	10c00015 	stw	r3,0(r2)
    28cc:	e0bffb17 	ldw	r2,-20(fp)
    28d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    28d4:	e0bffe17 	ldw	r2,-8(fp)
    28d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    28dc:	e037883a 	mov	sp,fp
    28e0:	df000017 	ldw	fp,0(sp)
    28e4:	dec00104 	addi	sp,sp,4
    28e8:	f800283a 	ret

000028ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    28ec:	defffb04 	addi	sp,sp,-20
    28f0:	dfc00415 	stw	ra,16(sp)
    28f4:	df000315 	stw	fp,12(sp)
    28f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    28fc:	d0a00917 	ldw	r2,-32732(gp)
    2900:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2904:	d0a50717 	ldw	r2,-27620(gp)
    2908:	10800044 	addi	r2,r2,1
    290c:	d0a50715 	stw	r2,-27620(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2910:	00002e06 	br	29cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    2914:	e0bffd17 	ldw	r2,-12(fp)
    2918:	10800017 	ldw	r2,0(r2)
    291c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2920:	e0bffd17 	ldw	r2,-12(fp)
    2924:	10800403 	ldbu	r2,16(r2)
    2928:	10803fcc 	andi	r2,r2,255
    292c:	10000426 	beq	r2,zero,2940 <alt_tick+0x54>
    2930:	d0a50717 	ldw	r2,-27620(gp)
    2934:	1000021e 	bne	r2,zero,2940 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    2938:	e0bffd17 	ldw	r2,-12(fp)
    293c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2940:	e0bffd17 	ldw	r2,-12(fp)
    2944:	10800217 	ldw	r2,8(r2)
    2948:	d0e50717 	ldw	r3,-27620(gp)
    294c:	18801d36 	bltu	r3,r2,29c4 <alt_tick+0xd8>
    2950:	e0bffd17 	ldw	r2,-12(fp)
    2954:	10800403 	ldbu	r2,16(r2)
    2958:	10803fcc 	andi	r2,r2,255
    295c:	1000191e 	bne	r2,zero,29c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    2960:	e0bffd17 	ldw	r2,-12(fp)
    2964:	10800317 	ldw	r2,12(r2)
    2968:	e0fffd17 	ldw	r3,-12(fp)
    296c:	18c00517 	ldw	r3,20(r3)
    2970:	1809883a 	mov	r4,r3
    2974:	103ee83a 	callr	r2
    2978:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    297c:	e0bfff17 	ldw	r2,-4(fp)
    2980:	1000031e 	bne	r2,zero,2990 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    2984:	e13ffd17 	ldw	r4,-12(fp)
    2988:	00028540 	call	2854 <alt_alarm_stop>
    298c:	00000d06 	br	29c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    2990:	e0bffd17 	ldw	r2,-12(fp)
    2994:	10c00217 	ldw	r3,8(r2)
    2998:	e0bfff17 	ldw	r2,-4(fp)
    299c:	1887883a 	add	r3,r3,r2
    29a0:	e0bffd17 	ldw	r2,-12(fp)
    29a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    29a8:	e0bffd17 	ldw	r2,-12(fp)
    29ac:	10c00217 	ldw	r3,8(r2)
    29b0:	d0a50717 	ldw	r2,-27620(gp)
    29b4:	1880032e 	bgeu	r3,r2,29c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    29b8:	e0bffd17 	ldw	r2,-12(fp)
    29bc:	00c00044 	movi	r3,1
    29c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    29c4:	e0bffe17 	ldw	r2,-8(fp)
    29c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    29cc:	e0fffd17 	ldw	r3,-12(fp)
    29d0:	d0a00904 	addi	r2,gp,-32732
    29d4:	18bfcf1e 	bne	r3,r2,2914 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    29d8:	0001883a 	nop
}
    29dc:	e037883a 	mov	sp,fp
    29e0:	dfc00117 	ldw	ra,4(sp)
    29e4:	df000017 	ldw	fp,0(sp)
    29e8:	dec00204 	addi	sp,sp,8
    29ec:	f800283a 	ret

000029f0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    29f0:	deffff04 	addi	sp,sp,-4
    29f4:	df000015 	stw	fp,0(sp)
    29f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    29fc:	000170fa 	wrctl	ienable,zero
}
    2a00:	e037883a 	mov	sp,fp
    2a04:	df000017 	ldw	fp,0(sp)
    2a08:	dec00104 	addi	sp,sp,4
    2a0c:	f800283a 	ret

00002a10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2a10:	defffa04 	addi	sp,sp,-24
    2a14:	dfc00515 	stw	ra,20(sp)
    2a18:	df000415 	stw	fp,16(sp)
    2a1c:	df000404 	addi	fp,sp,16
    2a20:	e13ffe15 	stw	r4,-8(fp)
    2a24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2a28:	e0bfff17 	ldw	r2,-4(fp)
    2a2c:	10800017 	ldw	r2,0(r2)
    2a30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2a34:	e13ffe17 	ldw	r4,-8(fp)
    2a38:	00003280 	call	328 <strlen>
    2a3c:	10800044 	addi	r2,r2,1
    2a40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2a44:	00000d06 	br	2a7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2a48:	e0bffc17 	ldw	r2,-16(fp)
    2a4c:	10c00217 	ldw	r3,8(r2)
    2a50:	e0bffd17 	ldw	r2,-12(fp)
    2a54:	1809883a 	mov	r4,r3
    2a58:	e17ffe17 	ldw	r5,-8(fp)
    2a5c:	100d883a 	mov	r6,r2
    2a60:	0002d580 	call	2d58 <memcmp>
    2a64:	1000021e 	bne	r2,zero,2a70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    2a68:	e0bffc17 	ldw	r2,-16(fp)
    2a6c:	00000706 	br	2a8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2a70:	e0bffc17 	ldw	r2,-16(fp)
    2a74:	10800017 	ldw	r2,0(r2)
    2a78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2a7c:	e0fffc17 	ldw	r3,-16(fp)
    2a80:	e0bfff17 	ldw	r2,-4(fp)
    2a84:	18bff01e 	bne	r3,r2,2a48 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2a88:	0005883a 	mov	r2,zero
}
    2a8c:	e037883a 	mov	sp,fp
    2a90:	dfc00117 	ldw	ra,4(sp)
    2a94:	df000017 	ldw	fp,0(sp)
    2a98:	dec00204 	addi	sp,sp,8
    2a9c:	f800283a 	ret

00002aa0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2aa0:	defffb04 	addi	sp,sp,-20
    2aa4:	dfc00415 	stw	ra,16(sp)
    2aa8:	df000315 	stw	fp,12(sp)
    2aac:	df000304 	addi	fp,sp,12
    2ab0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2ab4:	00800034 	movhi	r2,0
    2ab8:	10918e04 	addi	r2,r2,17976
    2abc:	10800017 	ldw	r2,0(r2)
    2ac0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2ac4:	00003106 	br	2b8c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    2ac8:	e0bffd17 	ldw	r2,-12(fp)
    2acc:	10800217 	ldw	r2,8(r2)
    2ad0:	1009883a 	mov	r4,r2
    2ad4:	00003280 	call	328 <strlen>
    2ad8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    2adc:	e0bffd17 	ldw	r2,-12(fp)
    2ae0:	10c00217 	ldw	r3,8(r2)
    2ae4:	e0bffe17 	ldw	r2,-8(fp)
    2ae8:	10bfffc4 	addi	r2,r2,-1
    2aec:	1885883a 	add	r2,r3,r2
    2af0:	10800003 	ldbu	r2,0(r2)
    2af4:	10803fcc 	andi	r2,r2,255
    2af8:	1080201c 	xori	r2,r2,128
    2afc:	10bfe004 	addi	r2,r2,-128
    2b00:	10800bd8 	cmpnei	r2,r2,47
    2b04:	1000031e 	bne	r2,zero,2b14 <alt_find_file+0x74>
    {
      len -= 1;
    2b08:	e0bffe17 	ldw	r2,-8(fp)
    2b0c:	10bfffc4 	addi	r2,r2,-1
    2b10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2b14:	e0bffe17 	ldw	r2,-8(fp)
    2b18:	e0ffff17 	ldw	r3,-4(fp)
    2b1c:	1885883a 	add	r2,r3,r2
    2b20:	10800003 	ldbu	r2,0(r2)
    2b24:	10803fcc 	andi	r2,r2,255
    2b28:	1080201c 	xori	r2,r2,128
    2b2c:	10bfe004 	addi	r2,r2,-128
    2b30:	10800be0 	cmpeqi	r2,r2,47
    2b34:	1000081e 	bne	r2,zero,2b58 <alt_find_file+0xb8>
    2b38:	e0bffe17 	ldw	r2,-8(fp)
    2b3c:	e0ffff17 	ldw	r3,-4(fp)
    2b40:	1885883a 	add	r2,r3,r2
    2b44:	10800003 	ldbu	r2,0(r2)
    2b48:	10803fcc 	andi	r2,r2,255
    2b4c:	1080201c 	xori	r2,r2,128
    2b50:	10bfe004 	addi	r2,r2,-128
    2b54:	10000a1e 	bne	r2,zero,2b80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    2b58:	e0bffd17 	ldw	r2,-12(fp)
    2b5c:	10c00217 	ldw	r3,8(r2)
    2b60:	e0bffe17 	ldw	r2,-8(fp)
    2b64:	1809883a 	mov	r4,r3
    2b68:	e17fff17 	ldw	r5,-4(fp)
    2b6c:	100d883a 	mov	r6,r2
    2b70:	0002d580 	call	2d58 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2b74:	1000021e 	bne	r2,zero,2b80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2b78:	e0bffd17 	ldw	r2,-12(fp)
    2b7c:	00000806 	br	2ba0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    2b80:	e0bffd17 	ldw	r2,-12(fp)
    2b84:	10800017 	ldw	r2,0(r2)
    2b88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2b8c:	e0fffd17 	ldw	r3,-12(fp)
    2b90:	00800034 	movhi	r2,0
    2b94:	10918e04 	addi	r2,r2,17976
    2b98:	18bfcb1e 	bne	r3,r2,2ac8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2b9c:	0005883a 	mov	r2,zero
}
    2ba0:	e037883a 	mov	sp,fp
    2ba4:	dfc00117 	ldw	ra,4(sp)
    2ba8:	df000017 	ldw	fp,0(sp)
    2bac:	dec00204 	addi	sp,sp,8
    2bb0:	f800283a 	ret

00002bb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2bb4:	defffa04 	addi	sp,sp,-24
    2bb8:	dfc00515 	stw	ra,20(sp)
    2bbc:	df000415 	stw	fp,16(sp)
    2bc0:	dc000315 	stw	r16,12(sp)
    2bc4:	df000404 	addi	fp,sp,16
    2bc8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    2bcc:	00bffa04 	movi	r2,-24
    2bd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2bd4:	e03ffc15 	stw	zero,-16(fp)
    2bd8:	00002106 	br	2c60 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    2bdc:	04000034 	movhi	r16,0
    2be0:	84112c04 	addi	r16,r16,17584
    2be4:	e0bffc17 	ldw	r2,-16(fp)
    2be8:	1009883a 	mov	r4,r2
    2bec:	01400304 	movi	r5,12
    2bf0:	00031c80 	call	31c8 <__mulsi3>
    2bf4:	8085883a 	add	r2,r16,r2
    2bf8:	10800017 	ldw	r2,0(r2)
    2bfc:	1000151e 	bne	r2,zero,2c54 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    2c00:	04000034 	movhi	r16,0
    2c04:	84112c04 	addi	r16,r16,17584
    2c08:	e0bffc17 	ldw	r2,-16(fp)
    2c0c:	1009883a 	mov	r4,r2
    2c10:	01400304 	movi	r5,12
    2c14:	00031c80 	call	31c8 <__mulsi3>
    2c18:	8085883a 	add	r2,r16,r2
    2c1c:	e0fffe17 	ldw	r3,-8(fp)
    2c20:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    2c24:	00800034 	movhi	r2,0
    2c28:	10919204 	addi	r2,r2,17992
    2c2c:	10c00017 	ldw	r3,0(r2)
    2c30:	e0bffc17 	ldw	r2,-16(fp)
    2c34:	1880040e 	bge	r3,r2,2c48 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    2c38:	00800034 	movhi	r2,0
    2c3c:	10919204 	addi	r2,r2,17992
    2c40:	e0fffc17 	ldw	r3,-16(fp)
    2c44:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    2c48:	e0bffc17 	ldw	r2,-16(fp)
    2c4c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    2c50:	00000606 	br	2c6c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2c54:	e0bffc17 	ldw	r2,-16(fp)
    2c58:	10800044 	addi	r2,r2,1
    2c5c:	e0bffc15 	stw	r2,-16(fp)
    2c60:	e0bffc17 	ldw	r2,-16(fp)
    2c64:	10800810 	cmplti	r2,r2,32
    2c68:	103fdc1e 	bne	r2,zero,2bdc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2c6c:	e0bffd17 	ldw	r2,-12(fp)
}
    2c70:	e6ffff04 	addi	sp,fp,-4
    2c74:	dfc00217 	ldw	ra,8(sp)
    2c78:	df000117 	ldw	fp,4(sp)
    2c7c:	dc000017 	ldw	r16,0(sp)
    2c80:	dec00304 	addi	sp,sp,12
    2c84:	f800283a 	ret

00002c88 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    2c88:	defffe04 	addi	sp,sp,-8
    2c8c:	df000115 	stw	fp,4(sp)
    2c90:	df000104 	addi	fp,sp,4
    2c94:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    2c98:	e0bfff17 	ldw	r2,-4(fp)
    2c9c:	10bffe84 	addi	r2,r2,-6
    2ca0:	10c00428 	cmpgeui	r3,r2,16
    2ca4:	18001a1e 	bne	r3,zero,2d10 <alt_exception_cause_generated_bad_addr+0x88>
    2ca8:	100690ba 	slli	r3,r2,2
    2cac:	00800034 	movhi	r2,0
    2cb0:	108b3004 	addi	r2,r2,11456
    2cb4:	1885883a 	add	r2,r3,r2
    2cb8:	10800017 	ldw	r2,0(r2)
    2cbc:	1000683a 	jmp	r2
    2cc0:	00002d00 	call	2d0 <_puts_r+0x3c>
    2cc4:	00002d00 	call	2d0 <_puts_r+0x3c>
    2cc8:	00002d10 	cmplti	zero,zero,180
    2ccc:	00002d10 	cmplti	zero,zero,180
    2cd0:	00002d10 	cmplti	zero,zero,180
    2cd4:	00002d00 	call	2d0 <_puts_r+0x3c>
    2cd8:	00002d08 	cmpgei	zero,zero,180
    2cdc:	00002d10 	cmplti	zero,zero,180
    2ce0:	00002d00 	call	2d0 <_puts_r+0x3c>
    2ce4:	00002d00 	call	2d0 <_puts_r+0x3c>
    2ce8:	00002d10 	cmplti	zero,zero,180
    2cec:	00002d00 	call	2d0 <_puts_r+0x3c>
    2cf0:	00002d08 	cmpgei	zero,zero,180
    2cf4:	00002d10 	cmplti	zero,zero,180
    2cf8:	00002d10 	cmplti	zero,zero,180
    2cfc:	00002d00 	call	2d0 <_puts_r+0x3c>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2d00:	00800044 	movi	r2,1
    2d04:	00000306 	br	2d14 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    2d08:	0005883a 	mov	r2,zero
    2d0c:	00000106 	br	2d14 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    2d10:	0005883a 	mov	r2,zero
  }
}
    2d14:	e037883a 	mov	sp,fp
    2d18:	df000017 	ldw	fp,0(sp)
    2d1c:	dec00104 	addi	sp,sp,4
    2d20:	f800283a 	ret

00002d24 <atexit>:
    2d24:	200b883a 	mov	r5,r4
    2d28:	000d883a 	mov	r6,zero
    2d2c:	0009883a 	mov	r4,zero
    2d30:	000f883a 	mov	r7,zero
    2d34:	0002db01 	jmpi	2db0 <__register_exitproc>

00002d38 <exit>:
    2d38:	defffe04 	addi	sp,sp,-8
    2d3c:	000b883a 	mov	r5,zero
    2d40:	dc000015 	stw	r16,0(sp)
    2d44:	dfc00115 	stw	ra,4(sp)
    2d48:	2021883a 	mov	r16,r4
    2d4c:	0002f000 	call	2f00 <__call_exitprocs>
    2d50:	8009883a 	mov	r4,r16
    2d54:	00031f00 	call	31f0 <_exit>

00002d58 <memcmp>:
    2d58:	218d883a 	add	r6,r4,r6
    2d5c:	21800826 	beq	r4,r6,2d80 <memcmp+0x28>
    2d60:	20800003 	ldbu	r2,0(r4)
    2d64:	28c00003 	ldbu	r3,0(r5)
    2d68:	10c00226 	beq	r2,r3,2d74 <memcmp+0x1c>
    2d6c:	10c5c83a 	sub	r2,r2,r3
    2d70:	f800283a 	ret
    2d74:	21000044 	addi	r4,r4,1
    2d78:	29400044 	addi	r5,r5,1
    2d7c:	003ff706 	br	2d5c <memcmp+0x4>
    2d80:	0005883a 	mov	r2,zero
    2d84:	f800283a 	ret

00002d88 <memcpy>:
    2d88:	2005883a 	mov	r2,r4
    2d8c:	0007883a 	mov	r3,zero
    2d90:	19800626 	beq	r3,r6,2dac <memcpy+0x24>
    2d94:	28c9883a 	add	r4,r5,r3
    2d98:	21c00003 	ldbu	r7,0(r4)
    2d9c:	10c9883a 	add	r4,r2,r3
    2da0:	18c00044 	addi	r3,r3,1
    2da4:	21c00005 	stb	r7,0(r4)
    2da8:	003ff906 	br	2d90 <memcpy+0x8>
    2dac:	f800283a 	ret

00002db0 <__register_exitproc>:
    2db0:	00800034 	movhi	r2,0
    2db4:	defff904 	addi	sp,sp,-28
    2db8:	10918c04 	addi	r2,r2,17968
    2dbc:	dcc00315 	stw	r19,12(sp)
    2dc0:	14c00017 	ldw	r19,0(r2)
    2dc4:	dc000015 	stw	r16,0(sp)
    2dc8:	dd400515 	stw	r21,20(sp)
    2dcc:	9c000c17 	ldw	r16,48(r19)
    2dd0:	dd000415 	stw	r20,16(sp)
    2dd4:	dc800215 	stw	r18,8(sp)
    2dd8:	dc400115 	stw	r17,4(sp)
    2ddc:	dfc00615 	stw	ra,24(sp)
    2de0:	202b883a 	mov	r21,r4
    2de4:	2823883a 	mov	r17,r5
    2de8:	3029883a 	mov	r20,r6
    2dec:	3825883a 	mov	r18,r7
    2df0:	8000021e 	bne	r16,zero,2dfc <__register_exitproc+0x4c>
    2df4:	9c000d04 	addi	r16,r19,52
    2df8:	9c000c15 	stw	r16,48(r19)
    2dfc:	80800117 	ldw	r2,4(r16)
    2e00:	00c007c4 	movi	r3,31
    2e04:	1880100e 	bge	r3,r2,2e48 <__register_exitproc+0x98>
    2e08:	00800034 	movhi	r2,0
    2e0c:	10800004 	addi	r2,r2,0
    2e10:	1000021e 	bne	r2,zero,2e1c <__register_exitproc+0x6c>
    2e14:	00bfffc4 	movi	r2,-1
    2e18:	00003006 	br	2edc <__register_exitproc+0x12c>
    2e1c:	01002304 	movi	r4,140
    2e20:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    2e24:	1021883a 	mov	r16,r2
    2e28:	103ffa26 	beq	r2,zero,2e14 <__register_exitproc+0x64>
    2e2c:	10000115 	stw	zero,4(r2)
    2e30:	98800c17 	ldw	r2,48(r19)
    2e34:	80800015 	stw	r2,0(r16)
    2e38:	9c000c15 	stw	r16,48(r19)
    2e3c:	80002215 	stw	zero,136(r16)
    2e40:	a800071e 	bne	r21,zero,2e60 <__register_exitproc+0xb0>
    2e44:	00001c06 	br	2eb8 <__register_exitproc+0x108>
    2e48:	a8001b26 	beq	r21,zero,2eb8 <__register_exitproc+0x108>
    2e4c:	80802217 	ldw	r2,136(r16)
    2e50:	1000091e 	bne	r2,zero,2e78 <__register_exitproc+0xc8>
    2e54:	00800034 	movhi	r2,0
    2e58:	10800004 	addi	r2,r2,0
    2e5c:	103fed26 	beq	r2,zero,2e14 <__register_exitproc+0x64>
    2e60:	01004204 	movi	r4,264
    2e64:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    2e68:	103fea26 	beq	r2,zero,2e14 <__register_exitproc+0x64>
    2e6c:	10004015 	stw	zero,256(r2)
    2e70:	10004115 	stw	zero,260(r2)
    2e74:	80802215 	stw	r2,136(r16)
    2e78:	81000117 	ldw	r4,4(r16)
    2e7c:	01400044 	movi	r5,1
    2e80:	2107883a 	add	r3,r4,r4
    2e84:	18c7883a 	add	r3,r3,r3
    2e88:	10c7883a 	add	r3,r2,r3
    2e8c:	1d000015 	stw	r20,0(r3)
    2e90:	290a983a 	sll	r5,r5,r4
    2e94:	11004017 	ldw	r4,256(r2)
    2e98:	2148b03a 	or	r4,r4,r5
    2e9c:	11004015 	stw	r4,256(r2)
    2ea0:	1c802015 	stw	r18,128(r3)
    2ea4:	00c00084 	movi	r3,2
    2ea8:	a8c0031e 	bne	r21,r3,2eb8 <__register_exitproc+0x108>
    2eac:	10c04117 	ldw	r3,260(r2)
    2eb0:	194ab03a 	or	r5,r3,r5
    2eb4:	11404115 	stw	r5,260(r2)
    2eb8:	80800117 	ldw	r2,4(r16)
    2ebc:	10c00044 	addi	r3,r2,1
    2ec0:	10800084 	addi	r2,r2,2
    2ec4:	1085883a 	add	r2,r2,r2
    2ec8:	1085883a 	add	r2,r2,r2
    2ecc:	80c00115 	stw	r3,4(r16)
    2ed0:	80a1883a 	add	r16,r16,r2
    2ed4:	84400015 	stw	r17,0(r16)
    2ed8:	0005883a 	mov	r2,zero
    2edc:	dfc00617 	ldw	ra,24(sp)
    2ee0:	dd400517 	ldw	r21,20(sp)
    2ee4:	dd000417 	ldw	r20,16(sp)
    2ee8:	dcc00317 	ldw	r19,12(sp)
    2eec:	dc800217 	ldw	r18,8(sp)
    2ef0:	dc400117 	ldw	r17,4(sp)
    2ef4:	dc000017 	ldw	r16,0(sp)
    2ef8:	dec00704 	addi	sp,sp,28
    2efc:	f800283a 	ret

00002f00 <__call_exitprocs>:
    2f00:	00800034 	movhi	r2,0
    2f04:	10918c04 	addi	r2,r2,17968
    2f08:	10800017 	ldw	r2,0(r2)
    2f0c:	defff304 	addi	sp,sp,-52
    2f10:	ddc00a15 	stw	r23,40(sp)
    2f14:	d8800015 	stw	r2,0(sp)
    2f18:	05c00034 	movhi	r23,0
    2f1c:	10800c04 	addi	r2,r2,48
    2f20:	dc800515 	stw	r18,20(sp)
    2f24:	dfc00c15 	stw	ra,48(sp)
    2f28:	df000b15 	stw	fp,44(sp)
    2f2c:	dd800915 	stw	r22,36(sp)
    2f30:	dd400815 	stw	r21,32(sp)
    2f34:	dd000715 	stw	r20,28(sp)
    2f38:	dcc00615 	stw	r19,24(sp)
    2f3c:	dc400415 	stw	r17,16(sp)
    2f40:	dc000315 	stw	r16,12(sp)
    2f44:	d9000115 	stw	r4,4(sp)
    2f48:	2825883a 	mov	r18,r5
    2f4c:	d8800215 	stw	r2,8(sp)
    2f50:	bdc00004 	addi	r23,r23,0
    2f54:	d8800017 	ldw	r2,0(sp)
    2f58:	dc400217 	ldw	r17,8(sp)
    2f5c:	14c00c17 	ldw	r19,48(r2)
    2f60:	98004226 	beq	r19,zero,306c <__call_exitprocs+0x16c>
    2f64:	9c000117 	ldw	r16,4(r19)
    2f68:	00900034 	movhi	r2,16384
    2f6c:	10bfffc4 	addi	r2,r2,-1
    2f70:	9d002217 	ldw	r20,136(r19)
    2f74:	857fffc4 	addi	r21,r16,-1
    2f78:	80a1883a 	add	r16,r16,r2
    2f7c:	8421883a 	add	r16,r16,r16
    2f80:	8421883a 	add	r16,r16,r16
    2f84:	a42d883a 	add	r22,r20,r16
    2f88:	84000204 	addi	r16,r16,8
    2f8c:	9c21883a 	add	r16,r19,r16
    2f90:	a8002616 	blt	r21,zero,302c <__call_exitprocs+0x12c>
    2f94:	90000326 	beq	r18,zero,2fa4 <__call_exitprocs+0xa4>
    2f98:	a0002026 	beq	r20,zero,301c <__call_exitprocs+0x11c>
    2f9c:	b1002017 	ldw	r4,128(r22)
    2fa0:	24801e1e 	bne	r4,r18,301c <__call_exitprocs+0x11c>
    2fa4:	99000117 	ldw	r4,4(r19)
    2fa8:	82000017 	ldw	r8,0(r16)
    2fac:	213fffc4 	addi	r4,r4,-1
    2fb0:	a900021e 	bne	r21,r4,2fbc <__call_exitprocs+0xbc>
    2fb4:	9d400115 	stw	r21,4(r19)
    2fb8:	00000106 	br	2fc0 <__call_exitprocs+0xc0>
    2fbc:	80000015 	stw	zero,0(r16)
    2fc0:	40001626 	beq	r8,zero,301c <__call_exitprocs+0x11c>
    2fc4:	9f000117 	ldw	fp,4(r19)
    2fc8:	a0000526 	beq	r20,zero,2fe0 <__call_exitprocs+0xe0>
    2fcc:	00800044 	movi	r2,1
    2fd0:	1552983a 	sll	r9,r2,r21
    2fd4:	a1404017 	ldw	r5,256(r20)
    2fd8:	494a703a 	and	r5,r9,r5
    2fdc:	2800021e 	bne	r5,zero,2fe8 <__call_exitprocs+0xe8>
    2fe0:	403ee83a 	callr	r8
    2fe4:	00000906 	br	300c <__call_exitprocs+0x10c>
    2fe8:	a1004117 	ldw	r4,260(r20)
    2fec:	4908703a 	and	r4,r9,r4
    2ff0:	2000041e 	bne	r4,zero,3004 <__call_exitprocs+0x104>
    2ff4:	d9000117 	ldw	r4,4(sp)
    2ff8:	b1400017 	ldw	r5,0(r22)
    2ffc:	403ee83a 	callr	r8
    3000:	00000206 	br	300c <__call_exitprocs+0x10c>
    3004:	b1000017 	ldw	r4,0(r22)
    3008:	403ee83a 	callr	r8
    300c:	99000117 	ldw	r4,4(r19)
    3010:	e13fd01e 	bne	fp,r4,2f54 <__call_exitprocs+0x54>
    3014:	89000017 	ldw	r4,0(r17)
    3018:	24ffce1e 	bne	r4,r19,2f54 <__call_exitprocs+0x54>
    301c:	ad7fffc4 	addi	r21,r21,-1
    3020:	b5bfff04 	addi	r22,r22,-4
    3024:	843fff04 	addi	r16,r16,-4
    3028:	003fd906 	br	2f90 <__call_exitprocs+0x90>
    302c:	b8000f26 	beq	r23,zero,306c <__call_exitprocs+0x16c>
    3030:	99400117 	ldw	r5,4(r19)
    3034:	99000017 	ldw	r4,0(r19)
    3038:	2800091e 	bne	r5,zero,3060 <__call_exitprocs+0x160>
    303c:	20000826 	beq	r4,zero,3060 <__call_exitprocs+0x160>
    3040:	89000015 	stw	r4,0(r17)
    3044:	a0000226 	beq	r20,zero,3050 <__call_exitprocs+0x150>
    3048:	a009883a 	mov	r4,r20
    304c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    3050:	9809883a 	mov	r4,r19
    3054:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    3058:	8cc00017 	ldw	r19,0(r17)
    305c:	003fc006 	br	2f60 <__call_exitprocs+0x60>
    3060:	9823883a 	mov	r17,r19
    3064:	2027883a 	mov	r19,r4
    3068:	003fbd06 	br	2f60 <__call_exitprocs+0x60>
    306c:	dfc00c17 	ldw	ra,48(sp)
    3070:	df000b17 	ldw	fp,44(sp)
    3074:	ddc00a17 	ldw	r23,40(sp)
    3078:	dd800917 	ldw	r22,36(sp)
    307c:	dd400817 	ldw	r21,32(sp)
    3080:	dd000717 	ldw	r20,28(sp)
    3084:	dcc00617 	ldw	r19,24(sp)
    3088:	dc800517 	ldw	r18,20(sp)
    308c:	dc400417 	ldw	r17,16(sp)
    3090:	dc000317 	ldw	r16,12(sp)
    3094:	dec00d04 	addi	sp,sp,52
    3098:	f800283a 	ret

0000309c <udivmodsi4>:
    309c:	2900182e 	bgeu	r5,r4,3100 <udivmodsi4+0x64>
    30a0:	28001716 	blt	r5,zero,3100 <udivmodsi4+0x64>
    30a4:	00800804 	movi	r2,32
    30a8:	00c00044 	movi	r3,1
    30ac:	00000206 	br	30b8 <udivmodsi4+0x1c>
    30b0:	10001126 	beq	r2,zero,30f8 <udivmodsi4+0x5c>
    30b4:	28000516 	blt	r5,zero,30cc <udivmodsi4+0x30>
    30b8:	294b883a 	add	r5,r5,r5
    30bc:	10bfffc4 	addi	r2,r2,-1
    30c0:	18c7883a 	add	r3,r3,r3
    30c4:	293ffa36 	bltu	r5,r4,30b0 <udivmodsi4+0x14>
    30c8:	18000b26 	beq	r3,zero,30f8 <udivmodsi4+0x5c>
    30cc:	0005883a 	mov	r2,zero
    30d0:	21400236 	bltu	r4,r5,30dc <udivmodsi4+0x40>
    30d4:	2149c83a 	sub	r4,r4,r5
    30d8:	10c4b03a 	or	r2,r2,r3
    30dc:	1806d07a 	srli	r3,r3,1
    30e0:	280ad07a 	srli	r5,r5,1
    30e4:	183ffa1e 	bne	r3,zero,30d0 <udivmodsi4+0x34>
    30e8:	3000011e 	bne	r6,zero,30f0 <udivmodsi4+0x54>
    30ec:	f800283a 	ret
    30f0:	2005883a 	mov	r2,r4
    30f4:	f800283a 	ret
    30f8:	0005883a 	mov	r2,zero
    30fc:	003ffa06 	br	30e8 <udivmodsi4+0x4c>
    3100:	00c00044 	movi	r3,1
    3104:	003ff106 	br	30cc <udivmodsi4+0x30>

00003108 <__divsi3>:
    3108:	defffe04 	addi	sp,sp,-8
    310c:	dfc00115 	stw	ra,4(sp)
    3110:	dc000015 	stw	r16,0(sp)
    3114:	20000b16 	blt	r4,zero,3144 <__divsi3+0x3c>
    3118:	0021883a 	mov	r16,zero
    311c:	28000c16 	blt	r5,zero,3150 <__divsi3+0x48>
    3120:	000d883a 	mov	r6,zero
    3124:	000309c0 	call	309c <udivmodsi4>
    3128:	0407c83a 	sub	r3,zero,r16
    312c:	1884f03a 	xor	r2,r3,r2
    3130:	1405883a 	add	r2,r2,r16
    3134:	dfc00117 	ldw	ra,4(sp)
    3138:	dc000017 	ldw	r16,0(sp)
    313c:	dec00204 	addi	sp,sp,8
    3140:	f800283a 	ret
    3144:	0109c83a 	sub	r4,zero,r4
    3148:	04000044 	movi	r16,1
    314c:	283ff40e 	bge	r5,zero,3120 <__divsi3+0x18>
    3150:	014bc83a 	sub	r5,zero,r5
    3154:	8400005c 	xori	r16,r16,1
    3158:	003ff106 	br	3120 <__divsi3+0x18>

0000315c <__modsi3>:
    315c:	defffd04 	addi	sp,sp,-12
    3160:	dfc00215 	stw	ra,8(sp)
    3164:	dc400115 	stw	r17,4(sp)
    3168:	dc000015 	stw	r16,0(sp)
    316c:	20000c16 	blt	r4,zero,31a0 <__modsi3+0x44>
    3170:	0023883a 	mov	r17,zero
    3174:	0021883a 	mov	r16,zero
    3178:	28000d16 	blt	r5,zero,31b0 <__modsi3+0x54>
    317c:	01800044 	movi	r6,1
    3180:	000309c0 	call	309c <udivmodsi4>
    3184:	1404f03a 	xor	r2,r2,r16
    3188:	8885883a 	add	r2,r17,r2
    318c:	dfc00217 	ldw	ra,8(sp)
    3190:	dc400117 	ldw	r17,4(sp)
    3194:	dc000017 	ldw	r16,0(sp)
    3198:	dec00304 	addi	sp,sp,12
    319c:	f800283a 	ret
    31a0:	0109c83a 	sub	r4,zero,r4
    31a4:	04400044 	movi	r17,1
    31a8:	043fffc4 	movi	r16,-1
    31ac:	283ff30e 	bge	r5,zero,317c <__modsi3+0x20>
    31b0:	014bc83a 	sub	r5,zero,r5
    31b4:	003ff106 	br	317c <__modsi3+0x20>

000031b8 <__udivsi3>:
    31b8:	000d883a 	mov	r6,zero
    31bc:	000309c1 	jmpi	309c <udivmodsi4>

000031c0 <__umodsi3>:
    31c0:	01800044 	movi	r6,1
    31c4:	000309c1 	jmpi	309c <udivmodsi4>

000031c8 <__mulsi3>:
    31c8:	0005883a 	mov	r2,zero
    31cc:	20000726 	beq	r4,zero,31ec <__mulsi3+0x24>
    31d0:	20c0004c 	andi	r3,r4,1
    31d4:	2008d07a 	srli	r4,r4,1
    31d8:	18000126 	beq	r3,zero,31e0 <__mulsi3+0x18>
    31dc:	1145883a 	add	r2,r2,r5
    31e0:	294b883a 	add	r5,r5,r5
    31e4:	203ffa1e 	bne	r4,zero,31d0 <__mulsi3+0x8>
    31e8:	f800283a 	ret
    31ec:	f800283a 	ret

000031f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    31f0:	defffd04 	addi	sp,sp,-12
    31f4:	df000215 	stw	fp,8(sp)
    31f8:	df000204 	addi	fp,sp,8
    31fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    3200:	0001883a 	nop
    3204:	e0bfff17 	ldw	r2,-4(fp)
    3208:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    320c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    3210:	10000226 	beq	r2,zero,321c <_exit+0x2c>
    ALT_SIM_FAIL();
    3214:	002af070 	cmpltui	zero,zero,43969
    3218:	00000106 	br	3220 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    321c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    3220:	003fff06 	br	3220 <_exit+0x30>
